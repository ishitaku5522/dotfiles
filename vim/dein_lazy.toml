# vim:set foldmethod=marker:
[[plugins]]
repo = 'osyo-manga/vim-precious'# {{{
on_cmd = ["PreciousReset", "PreciousSwitch"]
depends = ['context_filetype.vim']
hook_add = '''
    let g:context_filetype#search_offset = 300
    let g:precious_enable_switch_CursorMoved = { '*' : 0 }
    let g:precious_enable_switch_CursorHold = { '*' : 1 }
    " INSERTモードのON／OFFに合わせてトグル
    augroup PreciousAuto
        autocmd InsertEnter * :PreciousSwitch
        " autocmd InsertLeave * :PreciousReset
    augroup END
    " setfiletype を無効
    " let g:precious_enable_switchers = {
    " \    "*" : {
    " \        "setfiletype" : 0,
    " \    },
    " \}
    " augroup test
    "     autocmd!
    "     autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
    " augroup END
'''# }}}
[[plugins]]
repo = "cohama/lexima.vim"# {{{
on_i = 1
hook_post_source = '''
    imap <expr> <C-h> lexima#expand('<BS>', 'i')
'''# }}}
[[plugins]]
repo = 'rhysd/vim-clang-format'# {{{
on_ft = ['c','cpp']
hook_add = '''
    let g:clang_format#auto_format = 0

    let g:clang_format#command = 'clang-format'
    for minorversion in range(10)
        if executable('clang-format-3.' . minorversion)
            let g:clang_format#command = 'clang-format-3.' . minorversion
        endif
    endfor

    let g:clang_format#style_options = {
                \ "AllowShortIfStatementsOnASingleLine" : "true",
                \ "AllowShortBlocksOnASingleLine" : "true",
                \ "AllowShortCaseLabelsOnASingleLine" : "true",
                \ "AllowShortFunctionsOnASingleLine" : "true",
                \ "AllowShortLoopsOnASingleLine" : "true",
                \ "AlignAfterOpenBracket" : "AlwaysBreak",
                \ "AlignConsecutiveAssignments" : "true",
                \ "AlignConsecutiveDeclarations" : "true",
                \ "AlignTrailingComments" : "true",
                \ "TabWidth" : "4",
                \ "UseTab" : "Never",
                \ "ColumnLimit" : "120"
                \ }
'''# }}}
[[plugins]]
repo = 'cespare/vim-toml'# {{{
on_ft = 'toml'# }}}
[[plugins]]
repo = 'davidhalter/jedi-vim'# {{{
on_ft = 'python'
# depends = 'neocomplete.vim'
hook_post_source = '''
    "Windowsの場合PYTHONHOMEの環境変数設定が必要なので注意
    " augroup JEDIVIM
    "     autocmd FileType python setlocal omnifunc=jedi#completions
    " augroup END

    " Enable these lines or ...
    " if !exists('g:neocomplete#sources#omni#input_patterns')
    "     let g:neocomplete#sources#omni#input_patterns = {}
    " endif
    " let g:neocomplete#sources#omni#input_patterns.python =
    "             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

    " ... these lines.
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python =
                \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#auto_close_doc = 1
    let g:jedi#show_call_signatures = 2
    " let g:jedi#force_py_version = 3
'''# }}}
[[plugins]]
repo = 't9md/vim-choosewin'
[[plugins]]
repo = 'glidenote/memolist.vim'# {{{
on_cmd = ['MemoNew', 'MemoList']
hook_add = '''
    " let g:memolist_memo_suffix = 'txt'
    let g:memolist_unite = 1
'''# }}}
[[plugins]]
repo = 'majutsushi/tagbar'# {{{
on_cmd = ['TagbarToggle', 'TagbarOpen']
hook_add = '''
    nnoremap <silent> <Leader>t :TagbarOpen j<CR>
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_sort = 0
    let g:tagbar_indent = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_autopreview = 1
    let g:tagbar_autofocus = 1
    let g:tagbar_autoclose = 1
'''# }}}

# TWEETVIM PLUGINS {{{
[[plugins]]
repo = 'basyura/TweetVim.git'# {{{
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream', 'TweetVimSay']
depends = ['bitly.vim', 'twibill.vim', 'neco-tweetvim',  'open-browser.vim']
hook_add = '''
    " 1ページに表示する最大数
    let g:tweetvim_tweet_per_page = 50
    " F6と,uvでTweetVimのtimeline選択
    let g:tweetvim_expand_t_co = 1
    " let g:tweetvim_open_buffer_cmd = "split!"
    let g:tweetvim_display_source = 1
    let g:tweetvim_display_username = 1
    let g:tweetvim_display_icon = 1
    " let g:tweetvim_async_post = 0
    nnoremap <Leader>Tl :<C-u>Unite tweetvim<CR>
    nnoremap <Leader>Tm :<C-u>TweetVimMentions<CR>
    " nnoremap <Leader>Tl :<C-u>TweetVimListStatuses 
    nnoremap <Leader>Tu :<C-u>TweetVimUserStream<CR>
    nnoremap <Leader>Ts :<C-u>TweetVimSay<CR>
'''# }}}
# HTML CSS JS PLUGINS {{{
[[plugins]]
repo = 'csscomb/vim-csscomb'# {{{
on_ft = 'css'# }}}
# }}}
# QUICKRUN SYNTAX CHECKS {{{
[[plugins]]
repo = "thinca/vim-quickrun"# {{{
depends = "vim-watchdogs"
on_cmd = 'QuickRun'
hook_post_source = '''
" quickrun-hook-add-include-option {{{
    let s:hook = {
                \ "name": "add_include_option",
                \ "kind": "hook",
                \ "config": {
                \   "enable": 0,
                \   },
                \ }

    function! s:hook.on_module_loaded(session, context)
        let paths = filter(split(&path, ","), "len(v:val) && v:val !='.' && v:val !~ 'mingw'")
        if len(paths)
            let a:session.config.cmdopt .= " -I".join(paths, " -I")
        endif
    endfunction

    call quickrun#module#register(s:hook, 1)
    unlet s:hook
    " }}}
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    let g:quickrun_config._ = {
                \ 'runner'    : 'job',
                \ 'runner/job/interval' : 100,
                \ 'outputter/buffer/into': 1,
                \ 'outputter/buffer/close_on_empty' : 1,
                \ }
    " \ 'runner'    : 'vimproc',
    " \ 'runner/vimproc/updatetime' : 100,
    let g:quickrun_config.python = {
                \ 'command' : 'python',
                \ 'cmdopt' : '-u'
                \ }
    let g:quickrun_config.markdown = {
                \ 'type': 'markdown/pandoc',
                \ 'cmdopt': '-s',
                \ 'outputter': 'browser'
                \ }

    let s:config = {
                \"cpp" : {
                \    "hook/add_include_option/enable" : 1
                \    },
                \"cpp/watchdogs_checker" : {
                \    "type" : "watchdogs_checker/clang++",
                \    "hook/add_include_option/enable" : 1,
                \    "cmdopt" : '-std=c++11 -Wall'
                \   },
                \"watchdogs_checker/_" : {
                \   'runner'    : 'job',
                \   'runner/job/interval' : 100,
                \   "outputter/quickfix/open_cmd" : "copen 5"
                \   }
                \}
                " \ "vim/watchdogs_checker" : {
                " \   "type" : "watchdogs_checker/vint",
                " \   },
    call extend(g:quickrun_config, s:config)
    unlet s:config

    let g:quickrun_config["watchdogs_checker/_"] = {
                \ 'runner'    : 'job',
                \ 'runner/job/interval' : 100,
                \ "outputter/quickfix/open_cmd" : "copen 8"
                \}
                " \ "runner/vimproc/updatetime" : 100,
                "
     call watchdogs#setup(g:quickrun_config)

    " nnoremap <silent> <Leader>R :QuickRun<CR>
    " nmap <Leader>R <Plug>(quickrun)
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''# }}}
[[plugins]]
repo = "osyo-manga/vim-watchdogs" # {{{
on_cmd = 'WatchdogsRun'
depends = [ 'shabadou.vim' ]
hook_add = '''
     let g:watchdogs_check_BufWritePost_enable = 0
     let g:watchdogs_check_CursorHold_enable = 0
''' # }}}
# }}}
[[plugins]]
on_i = 1
depends = "YouCompleteMe"
repo = 'rdnetto/YCM-Generator'
[[plugins]]
repo = 'sjl/gundo.vim'
on_event = "CursorHold"
hook_add = '''
    nnoremap <Leader>gu :<C-u>GundoToggle<CR>
'''
[[plugins]]
repo = "osyo-manga/vim-brightest"
# on_event = ['VimEnter']# {{{
on_cmd = ['BrightestEnable']
hook_add = '''
let g:brightest#highlight = {
\   "group" : "BrightestUnderline"
\}
'''# }}}
[[plugins]]
on_event = "CursorMoved"
repo = 'tyru/caw.vim.git'
[[plugins]]
on_event = "CursorMoved"
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'junegunn/vim-easy-align'# {{{
on_event = "CursorMoved"
hook_add = '''
    " ヴィジュアルモードで選択し，easy-align 呼んで整形．(e.g. vip<Enter>)
    vmap <Enter> <Plug>(LiveEasyAlign)

    " easy-align を呼んだ上で，移動したりテキストオブジェクトを指定して整形．(e.g. gaip)
    " nmap ga <Plug>(EasyAlign)
    " " Start interactive EasyAlign in visual mode (e.g. vipga)
    " xmap ga <Plug>(EasyAlign)
'''# }}}
