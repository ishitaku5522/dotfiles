# vim:set foldmethod=marker:
[[plugins]]
repo = 'osyo-manga/vim-precious'# {{{
on_i = 1
depends = ['context_filetype.vim']
hook_add = '''
	" let g:context_filetype#search_offset = 300
	" NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
	" let g:precious_enable_switch_CursorMoved = { '*' : 0 }
	" let g:precious_enable_switch_CursorHold = { '*' : 0 }
	" INSERTモードのON／OFFに合わせてトグル
	augroup PreciousAuto
		autocmd InsertEnter * :PreciousSwitch
		" autocmd InsertLeave * :PreciousReset
	augroup END
	" setfiletype を無効
	" let g:precious_enable_switchers = {
	" \	"*" : {
	" \		"setfiletype" : 0,
	" \	},
	" \}
	" augroup test
	" 	autocmd!
	" 	autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
	" augroup END
'''# }}}

[[plugins]]
repo = 'honza/vim-snippets'# {{{
on_i = 1# }}}

[[plugins]]
repo = 'Shougo/neosnippet.vim'# {{{
depends = ['vim-snippets']
on_i = 1
hook_add = '''
	" Plugin key-mappings.
	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-k>     <Plug>(neosnippet_expand_target)
	" SuperTab like snippets' behavior.
	imap <expr><TAB>
				\ pumvisible() ? "\<C-n>" :
				\ neosnippet#expandable_or_jumpable() ?
				\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
				\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

	" For conceal markers.
	if has('conceal')
	  set conceallevel=2 concealcursor=niv
	endif
	" Enable snipMate compatibility feature.
	let g:neosnippet#enable_snipmate_compatibility = 1
	" Tell Neosnippet about the other snippets
	let g:neosnippet#snippets_directory='~/.vim/dein/repos/github.com/honza/vim-snippets/snippets'

'''# }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'# {{{
depends = ['neosnippet.vim']
on_i = 1# }}}

[[plugins]]
repo = 'Shougo/vimfiler.vim'# {{{
on_cmd = ['VimFiler', 'VimFilerBufferDir','VimFilerCurrentDir']
depends = ['vimproc.vim', 'vim-choosewin']
hook_add = '''
	let g:vimfiler_force_overwrite_statusline = 0
	let g:vimfiler_enable_auto_cd = 1
	let g:vimfiler_as_default_explorer = 1
	nnoremap <silent> <Leader>e :VimFilerBufferDir -toggle -find -force-quit -split  -status -winwidth=35 -simple -split-action=below<CR>
	nnoremap <silent> <Leader>E :VimFilerCurrentDir -split -toggle -force-quit -status -winwidth=35 -simple -split-action=below<CR>
'''# }}}

[[plugins]]
repo = 'Shougo/neocomplete.vim'# {{{
on_i = 1
hook_add = '''
	"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" _(アンダースコア)区切りの補完を有効化
	let g:neocomplete#enable_underbar_completion = 1
	" let g:neocomplete#enable_camel_case_completion  =  1
	" ポップアップメニューで表示される候補の数
	let g:neocomplete#max_list = 30
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#enable_multibyte_completion = 1
	" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
	" setting for cache limit size

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ }
				" \ 'scheme' : $HOME.'/.gosh_completions',

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns._ = '\h\w*'

	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

	" Disabled features {{{
	" 補完に時間がかかってもスキップしない
	" let g:neocomplete#skip_auto_completion_time = "1"
	"
	" 使いづらいためDisable
	" Plugin key-mappings.
	" inoremap <expr><C-g> neocomplete#undo_completion()
	" inoremap <expr><C-l> neocomplete#complete_common_string()
	

	" 自動カッコ閉じと衝突のためDisable
	" " Recommended key-mappings.
	"
	" " <CR>: close popup and save indent.
	"
	" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	"
	" function! s:my_cr_function()
	" 	" return (pumvisible() ? "\<C-y>" : "" ) . "\<CR><ESC>"
	" 	" For no inserting <CR> key.
	" 	return pumvisible() ? "\<C-y>" : "\<CR>"
	" endfunction
	"
	" " <C-h>, <BS>: close popup and delete backword char.
	"
	" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	
	" " Close popup by <Space>.
	"
	" inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
	" }}}

'''# }}}

[[plugins]]
repo = "cohama/lexima.vim"# {{{
on_i = 1
hook_post_source = '''
	imap <expr> <C-h> lexima#expand('<BS>', 'i')
'''# }}}

[[plugins]]
repo = 'rhysd/vim-clang-format'# {{{
on_ft = ['c','cpp']
hook_add = '''
	let g:clang_format#auto_format = 0
	let g:clang_format#command = "clang-format-3.8"
'''# }}}

[[plugins]]
repo = 'justmao945/vim-clang'# {{{
on_ft = ['c', 'cpp']
hook_add = '''
	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	let g:neocomplete#sources#omni#input_patterns.c =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
	let g:neocomplete#sources#omni#input_patterns.cpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
	" if !exists('g:neocomplete#force_omni_input_patterns')
	" 	let g:neocomplete#force_omni_input_patterns = {} 
	" endif
	" let g:neocomplete#force_omni_input_patterns.c =
	" 			\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
	" let g:neocomplete#force_omni_input_patterns.cpp = 
	" 			\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'


	" disable auto completion for vim-clang
	let g:clang_auto = 0
	let g:clang_complete_auto = 0
	let g:clang_check_syntax_auto = 0
	let g:clang_enable_format_command = 0

	" clangのバージョン検索
	let g:clang_exec = 'clang'
	for minorversion in range(10)
		if executable('clang-3.' . minorversion)
			let g:clang_exec = 'clang-3.' . minorversion
		endif
	endfor

	let g:clang_format_exec = 'clang-format'
	for minorversion in range(10)
		if executable('clang-format-3.' . minorversion)
			let g:clang_format_exec = 'clang-format-3.' . minorversion
		endif
	endfor

	" 何故かコメントアウトしたら動いた -stdlib=libc++がうまく動かない
	" let g:clang_c_options = '-std=c11'
	" let g:clang_cpp_options = '-std=c++11 -stdlib=libc++ '

	" default 'longest' can not work with neocomplete
	" noselect オプションで最初の候補が自動選択されなくなる
	" let g:clang_c_completeopt = 'menuone,noselect,preview'
	" let g:clang_cpp_completeopt = 'menuone,noselect,preview'

'''# }}}

[[plugins]]
repo = 'gregsexton/MatchTag'# {{{
on_ft = ['html','xml']# }}}

[[plugins]]
repo =  'othree/html5.vim'# {{{
on_ft = ['html']
hook_add = '''
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1
'''# }}}

[[plugins]]
repo = 'https://github.com/csscomb/vim-csscomb'# {{{
on_ft = 'css'# }}}

[[plugins]]
repo =  'https://github.com/vim-scripts/JavaScript-Indent'# {{{
on_ft = 'javascript'# }}}

[[plugins]]
repo = 'cespare/vim-toml'# {{{
on_ft = 'toml'# }}}

[[plugins]]
repo = 'davidhalter/jedi-vim'# {{{
on_ft = 'python'
depends = 'neocomplete.vim'
hook_post_source = '''

	"Windowsの場合PYTHONHOMEの環境変数設定が必要なので注意
	augroup JEDIVIM
		autocmd FileType python setlocal omnifunc=jedi#completions
	augroup END

	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	let g:neocomplete#sources#omni#input_patterns.python =
				\ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

	" if !exists('g:neocomplete#force_omni_input_patterns')
	" 	let g:neocomplete#force_omni_input_patterns = {}
	" endif
	" let g:neocomplete#force_omni_input_patterns.python =
	" 			\ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
	
	let g:jedi#completions_enabled = 0
	let g:jedi#auto_vim_configuration = 0
	let g:jedi#auto_close_doc = 1
	let g:jedi#show_call_signatures = 2
	let g:jedi#force_py_version = 2

'''# }}}

# TWEETVIM
[[plugins]]
repo = 'https://github.com/basyura/bitly.vim.git'

[[plugins]]
repo = 'https://github.com/basyura/TweetVim.git'# {{{
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream', 'TweetVimSay']
depends = ['bitly.vim', 'twibill.vim', 'neco-tweetvim', 'unite-tweetvim']
hook_add = '''
	" 1ページに表示する最大数
	let g:tweetvim_tweet_per_page = 50
	" F6と,uvでTweetVimのtimeline選択
	let g:tweetvim_expand_t_co = 1
	" let g:tweetvim_open_buffer_cmd = "split!"
	let g:tweetvim_display_source = 1
	let g:tweetvim_display_username = 1
	let g:tweetvim_display_icon = 1
	" let g:tweetvim_async_post = 0
	nnoremap <Leader>Tl :<C-u>Unite tweetvim<CR>
	nnoremap <Leader>Tu :<C-u>TweetVimUserStream<CR>
	nnoremap <Leader>Ts :<C-u>TweetVimSay<CR>
'''# }}}

[[plugins]]
repo = 'https://github.com/basyura/twibill.vim.git'# {{{
depends = ['open-browser.vim']# }}}

[[plugins]]
repo = 'https://github.com/yomi322/neco-tweetvim.git'

[[plugins]]
repo = 'https://github.com/yomi322/unite-tweetvim.git'

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'mattn/vim-soundcloud'# {{{
on_cmd = ['Soundcloud']# }}}

# [[plugins]]
# repo = 'miyakogi/livemark.vim'"{{{
# on_cmd = ['LiveMark']
# hook_add = '''
# let g:livemark_python = 'C:\Program Files\Python35\'
# '''"}}}

[[plugins]]
repo = 'glidenote/memolist.vim'# {{{
on_cmd = ['MemoNew', 'MemoList']
hook_add = '''
	" let g:memolist_memo_suffix = 'txt'
	let g:memolist_unite = 1
'''# }}}

[[plugins]]
repo = 'majutsushi/tagbar'# {{{
on_cmd = ['TagbarToggle']
hook_add = '''

		nnoremap <silent> <Leader>t :TagbarOpen j<CR>
		let g:tagbar_show_linenumbers = 1
		let g:tagbar_sort = 0
		let g:tagbar_indent = 1
		let g:tagbar_autoshowtag = 1
		let g:tagbar_autopreview = 1
		let g:tagbar_autofocus = 1
		let g:tagbar_autoclose = 1
'''# }}}

[[plugins]]
repo = "https://github.com/thinca/vim-quickrun"# {{{
on_cmd = 'QuickRun'
hook_add = '''
	let g:quickrun_config = get(g:, 'quickrun_config', {})
	let g:quickrun_config._ = {
				\ 'runner'    : 'job',
				\ 'runner/job/interval' : 100,
				\ 'outputter/buffer/into': 1,
				\ 'outputter/buffer/close_on_empty' : 1,
				\ }
				" \ 'runner'    : 'vimproc',
				" \ 'runner/vimproc/updatetime' : 100,
	let g:quickrun_config.python = {
				\ 'command' : 'python',
				\ 'cmdopt' : '-u'
				\ }
	" if executable("clang++")
	" 	let g:quickrun_config.cpp = {
	" 				\ 'command': "clang++-3.8",
	" 				\'type': 'cpp/clang++'
	" 				\ }
	" let g:quickrun_config['cpp/clang++11'] = {
	" 			\ 'cmdopt': '--std=c++11 --stdlib=libc++',
	" 			\ 'type': 'cpp/clang++'
	" 			\ }
	" endif

	nnoremap <silent> <Leader>R :QuickRun<CR>
	" nmap <Leader>R <Plug>(quickrun)
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''# }}}

