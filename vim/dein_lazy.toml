[[plugins]]
repo = 'osyo-manga/vim-precious'
on_i = 1
depends = ['context_filetype.vim']
hook_add = '''
	" let g:context_filetype#search_offset = 300
	" NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
	" let g:precious_enable_switch_CursorMoved = { '*' : 0 }
	" let g:precious_enable_switch_CursorHold = { '*' : 0 }
	" INSERTモードのON／OFFに合わせてトグル
	augroup PreciousAuto
		" autocmd InsertEnter * :PreciousSwitch
		" autocmd InsertLeave * :PreciousReset
	augroup END
	" setfiletype を無効
	let g:precious_enable_switchers = {
	\	"*" : {
	\		"setfiletype" : 0,
	\	},
	\}
	augroup test
		autocmd!
		autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
	augroup END
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['vim-snippets']
on_i = 1
hook_add = '''
	" Plugin key-mappings.
	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-k>     <Plug>(neosnippet_expand_target)
	" SuperTab like snippets' behavior.
	imap <expr><TAB>
	 \ pumvisible() ? "\<C-n>" :
	 \ neosnippet#expandable_or_jumpable() ?
	 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	 \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

	" For conceal markers.
	if has('conceal')
	  set conceallevel=2 concealcursor=niv
	endif
	" Enable snipMate compatibility feature.
	let g:neosnippet#enable_snipmate_compatibility = 1
	" Tell Neosnippet about the other snippets
	let g:neosnippet#snippets_directory='~/.vim/dein/repos/github.com/honza/vim-snippets/snippets'

'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = ['neosnippet.vim']
on_i = 1

[[plugins]]
repo = "cohama/lexima.vim"
on_i = 1
hook_post_source = '''
	imap <expr> <C-h> lexima#expand('<BS>', 'i')
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
	"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" 補完に時間がかかってもスキップしない
	" let g:neocomplete#skip_auto_completion_time = "1"
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" _(アンダースコア)区切りの補完を有効化
	let g:neocomplete#enable_underbar_completion = 1
	let g:neocomplete#enable_camel_case_completion  =  1
	" ポップアップメニューで表示される候補の数
	let g:neocomplete#max_list = 10
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
	" setting for cache limit size
	" let g:neocomplete#sources#tags#cache_limit_size = 5000000

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions',
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	" let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	" inoremap <expr><C-g>     neocomplete#undo_completion()
	" inoremap <expr><C-l> neocomplete#complete_common_string()
	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	" function! s:my_cr_function()
	" 	" return (pumvisible() ? "\<C-y>" : "" ) . "\<CR><ESC>"
	" 	" For no inserting <CR> key.
	" 	return pumvisible() ? "\<C-y>" : "\<CR>"
	" endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	" Close popup by <Space>.
	" inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" Enable omni completion.
	augroup OMNICOMPLETE "{{{
		autocmd!
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END "}}}

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
	"
	"let g:neocomplete#sources#omni#input_patterns.php =
	"\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
	let g:neocomplete#sources#omni#input_patterns.c =
	\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
	let g:neocomplete#sources#omni#input_patterns.cpp =
	\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

	if !exists('g:neocomplete#force_omni_input_patterns')
		let g:neocomplete#force_omni_input_patterns = {} 
	endif
	" let g:neocomplete#force_overwrite_completefunc = 1
	" let g:neocomplete#force_omni_input_patterns.c =
	" \ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
	" let g:neocomplete#force_omni_input_patterns.cpp = 
	" \ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'


	" Unity用補完
	" augroup UNITYSUFFIX "{{{
	"   autocmd!
	"   autocmd Filetype javascript :set dictionary=~/.vim/unity_script.dict
	"   autocmd Filetype cs :set suffixesadd+=.cs
	"   autocmd Filetype cs :set dictionary=~/.vim/unity_script.dict
	" augroup END "}}}
	set timeout timeoutlen=1000 ttimeoutlen=100
'''


[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c','cpp']
hook_add = '''
	let g:clang_format#auto_format = 0
	let g:clang_format#command = "clang-format-3.8"
'''
[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']
hook_add = '''

		" 'justmao945/vim-clang' {{{

		" disable auto completion for vim-clang
		let g:clang_auto = 0
		let g:clang_complete_auto = 0
		let g:clang_check_syntax_auto = 0
		let g:clang_c_options = '-std=c11'
		let g:clang_cpp_options = '-std=c++11 -stdlib=libc++ '
        let g:clang_enable_format_command = 0

		" default 'longest' can not work with neocomplete
		" noselect オプションで最初の候補が自動選択されなくなる
		let g:clang_c_completeopt = 'menuone,noselect'
		let g:clang_cpp_completeopt = 'menuone,noselect'
		" clangのバージョンに従って増やす
		if executable('clang-3.8')
			let g:clang_exec = 'clang-3.8'
		elseif executable('clang-3.6')
			let g:clang_exec = 'clang-3.6'
		elseif executable('clang-3.5')
			let g:clang_exec = 'clang-3.5'
		elseif executable('clang-3.4')
			let g:clang_exec = 'clang-3.4'
		else
			let g:clang_exec = 'clang'
		endif

		if executable('clang-format-3.8')
			let g:clang_format_exec = 'clang-format-3.8'
		elseif executable('clang-format-3.6')
			let g:clang_format_exec = 'clang-format-3.6'
		elseif executable('clang-format-3.5')
			let g:clang_format_exec = 'clang-format-3.5'
		elseif executable('clang-format-3.4')
			let g:clang_format_exec = 'clang-format-3.4'
		else
			let g:clang_format_exec = 'clang-format'
		endif
'''
[[plugins]]
repo = 'gregsexton/MatchTag'
on_ft = ['html','xml']

[[plugins]]
repo =  'othree/html5.vim'
on_ft = ['html']
hook_add = '''
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1
'''

[[plugins]]
repo = 'https://github.com/csscomb/vim-csscomb'
on_ft = 'css'

[[plugins]]
repo =  'https://github.com/vim-scripts/JavaScript-Indent'
on_ft = 'javascript'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_post_source = '''

		"Windowsの場合PYTHONHOMEの環境変数設定が必要なので注意
	augroup JEDIVIM
		autocmd FileType python setlocal omnifunc=jedi#completions
		" noselect オプションで最初の候補が自動選択されなくなる
		autocmd FileType python setlocal completeopt=menuone,noselect
	augroup END
		" 以下前半で既出よりコメントアウト
		" if !exists('g:neocomplete#force_omni_input_patterns')
		" 	let g:neocomplete#force_omni_input_patterns = {}
		" endif
		let g:jedi#completions_enabled = 0
		let g:jedi#auto_vim_configuration = 0
		let g:jedi#auto_close_doc = 0
		let g:jedi#force_py_version = 2
		let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

'''

# TWEETVIM
[[plugins]]
repo = 'https://github.com/basyura/bitly.vim.git'

[[plugins]]
repo = 'https://github.com/basyura/TweetVim.git'
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream']
depends = ['bitly.vim', 'twibill.vim', 'neco-tweetvim', 'unite-tweetvim']
hook_add = '''
	" 1ページに表示する最大数
	let g:tweetvim_tweet_per_page = 10
	" F6と,uvでTweetVimのtimeline選択
	let g:tweetvim_display_source = 1
	let g:tweetvim_expand_t_co = 1
	let g:tweetvim_open_buffer_cmd = "split!"
	let g:tweetvim_display_source = 1
	let g:tweetvim_display_username = 1
	let g:tweetvim_display_icon = 1
	let g:tweetvim_async_post = 1
	nnoremap <Leader>tl :<C-u>Unite tweetvim<CR>
	nnoremap <Leader>tu :<C-u>TweetVimUserStream<CR>
	nnoremap <Leader>ts :<C-u>TweetVimSay<CR>
'''

[[plugins]]
repo = 'https://github.com/basyura/twibill.vim.git'
depends = ['open-browser.vim']

[[plugins]]
repo = 'https://github.com/yomi322/neco-tweetvim.git'

[[plugins]]
repo = 'https://github.com/yomi322/unite-tweetvim.git'

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_cmd = ['VimFilerBufferDir','VimFilerCurrentDir']
depends = ['vimproc.vim', 'vim-choosewin']
hook_add = '''
	let g:vimfiler_force_overwrite_statusline = 0
	let g:vimfiler_enable_auto_cd = 1
	let g:vimfiler_as_default_explorer = 1
	nnoremap <silent> <Leader>e :VimFilerBufferDir -toggle -find -force-quit -split  -status -winwidth=35 -simple -split-action=below<CR>
	nnoremap <silent> <Leader>E :VimFilerCurrentDir -split -toggle -force-quit -status -winwidth=35 -simple -split-action=below<CR>
'''

[[plugins]]
repo = 'mattn/vim-soundcloud'
on_cmd = ['Soundcloud']

# [[plugins]]
# repo = 'miyakogi/livemark.vim'
# on_cmd = ['LiveMark']
# hook_add = '''
# let g:livemark_python = 'C:\Program Files\Python35\'
# '''

[[plugins]]
repo = 'scrooloose/syntastic.git'
on_cmd = ['SyntasticCheck']
hook_add = '''
if executable("clang++")
	let g:syntastic_cpp_compiler = 'clang++'
	let g:syntastic_cpp_compiler_options = '--std=c++11 --stdlib=libc++'
endif

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" ここまでReccomend設定

" let g:syntastic_mode_map = { 'mode': 'passive',
" 			\ 'active_filetypes': ['ruby', 'javascript','coffee', 'scss'] }
let g:syntastic_ruby_checkers = ['rubocop'] " or ['rubocop', 'mri']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_coffee_checkers = ['coffeelint']
let g:syntastic_scss_checkers = ['scss_lint']
hi SyntasticErrorSign ctermfg=160
hi SyntasticWarningSign ctermfg=220
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList']
hook_add = '''
	" let g:memolist_memo_suffix = 'txt'
	let g:memolist_unite = 1
'''

