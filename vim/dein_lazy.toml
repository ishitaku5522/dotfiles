# vim:set foldmethod=marker:
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_cmd = ["PreciousReset", "PreciousSwitch"]
depends = ['context_filetype.vim']
hook_add = '''# {{{
    let g:context_filetype#search_offset = 300
    let g:precious_enable_switch_CursorMoved = { '*' : 0 }
    let g:precious_enable_switch_CursorHold = { '*' : 1 }
    " INSERTモードのON／OFFに合わせてトグル
    augroup PreciousAuto
        autocmd InsertEnter * :PreciousSwitch
        " autocmd InsertLeave * :PreciousReset
    augroup END
    " setfiletype を無効
    " let g:precious_enable_switchers = {
    " \    "*" : {
    " \        "setfiletype" : 0,
    " \    },
    " \}
    " augroup test
    "     autocmd!
    "     autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
    " augroup END
'''
# }}}
[[plugins]]
repo = "cohama/lexima.vim"
on_i = 1
hook_post_source = '''# {{{
    imap <expr> <C-h> lexima#expand('<BS>', 'i')
'''
# }}}
[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c','cpp']
hook_add = '''# {{{
    let g:clang_format#auto_format = 0

    let g:clang_format#command = 'clang-format'
    for minorversion in range(10)
        if executable('clang-format-3.' . minorversion)
            let g:clang_format#command = 'clang-format-3.' . minorversion
        endif
    endfor

    let g:clang_format#style_options = {
                \ "AllowShortIfStatementsOnASingleLine" : "true",
                \ "AllowShortBlocksOnASingleLine" : "true",
                \ "AllowShortCaseLabelsOnASingleLine" : "true",
                \ "AllowShortFunctionsOnASingleLine" : "true",
                \ "AllowShortLoopsOnASingleLine" : "true",
                \ "AlignAfterOpenBracket" : "AlwaysBreak",
                \ "AlignConsecutiveAssignments" : "true",
                \ "AlignConsecutiveDeclarations" : "true",
                \ "AlignTrailingComments" : "true",
                \ "TabWidth" : "4",
                \ "UseTab" : "Never",
                \ "ColumnLimit" : "120"
                \ }
'''
# }}}
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = 'python'
# # depends = 'neocomplete.vim'
# 
# hook_post_source = '''# {{{
#     "Windowsの場合PYTHONHOMEの環境変数設定が必要なので注意
#     " augroup JEDIVIM
#     "     autocmd FileType python setlocal omnifunc=jedi#completions
#     " augroup END
# 
#     " Enable these lines or ...
#     " if !exists('g:neocomplete#sources#omni#input_patterns')
#     "     let g:neocomplete#sources#omni#input_patterns = {}
#     " endif
#     " let g:neocomplete#sources#omni#input_patterns.python =
#     "             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
# 
#     " ... these lines.
#     if !exists('g:neocomplete#force_omni_input_patterns')
#         let g:neocomplete#force_omni_input_patterns = {}
#     endif
#     let g:neocomplete#force_omni_input_patterns.python =
#                 \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
# 
#     let g:jedi#completions_enabled = 0
#     let g:jedi#auto_vim_configuration = 0
#     let g:jedi#auto_close_doc = 1
#     let g:jedi#show_call_signatures = 2
#     " let g:jedi#force_py_version = 3
# '''
# # }}}
[[plugins]]
repo = 't9md/vim-choosewin'
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList']
hook_add = '''# {{{
    " let g:memolist_memo_suffix = 'txt'
    let g:memolist_unite = 1
'''
# }}}
[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle', 'TagbarOpen']
hook_add = '''# {{{
    nnoremap <silent> <Leader>t :TagbarOpen j<CR>
    let g:tagbar_show_linenumbers = 1
    let g:tagbar_sort = 0
    let g:tagbar_indent = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_autopreview = 1
    let g:tagbar_autofocus = 1
    let g:tagbar_autoclose = 1
'''
# }}}
[[plugins]]
repo = 'basyura/TweetVim.git'
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream', 'TweetVimSay', 'TweetVimCommandSay']
depends = ['bitly.vim', 'twibill.vim', 'neco-tweetvim',  'open-browser.vim']
hook_add = '''# {{{
    " 1ページに表示する最大数
    let g:tweetvim_tweet_per_page = 20
    " F6と,uvでTweetVimのtimeline選択
    let g:tweetvim_expand_t_co = 1
    " let g:tweetvim_open_buffer_cmd = "split!"
    let g:tweetvim_display_source = 1
    let g:tweetvim_display_username = 1
    let g:tweetvim_display_icon = 1
    " let g:tweetvim_async_post = 0
    nnoremap <Leader>Tl :<C-u>Unite tweetvim<CR>
    nnoremap <Leader>Tm :<C-u>TweetVimMentions<CR>
    " nnoremap <Leader>Tl :<C-u>TweetVimListStatuses
    nnoremap <Leader>Tu :<C-u>TweetVimUserStream<CR>
    nnoremap <Leader>Ts :<C-u>TweetVimSay<CR>
    nnoremap <Leader>Tc :<C-u>TweetVimCommandSay<CR>
'''
# }}}
# HTML CSS JS PLUGINS
[[plugins]]
repo = 'csscomb/vim-csscomb'
on_ft = 'css'
[[plugins]]
repo = 'Valloric/YouCompleteMe'
on_i = 1
hook_add = '''# {{{
    let g:ycm_global_ycm_extra_conf =
                \'~/.vim/dein/repos/github.com/Valloric/YouCompleteMe
                \/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

    let g:ycm_min_num_of_chars_for_completion = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax = 1
    let g:ycm_add_preview_to_completeopt = 1
    let g:ycm_autoclose_preview_window_after_completion = 1
    " setting of the which python is used
    if has("unix")
        let g:ycm_python_binary_path = "python" . g:myvimrc_python_version
        if !g:myvimrc_python_version == ""
            let g:UltiSnipsUsePythonVersion = g:myvimrc_python_version
        else
            let g:UltiSnipsUsePythonVersion = 2
        endif
    endif
    " let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    " let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    " let g:SuperTabDefaultCompletionType = '<C-n>'
'''# }}}
[[plugins]]
repo = 'rdnetto/YCM-Generator'
on_cmd = 'YcmGenerator'
depends = "YouCompleteMe"
[[plugins]]
repo = 'pocke/sushibar.vim'
on_cmd = "Sushibar"
hook_post_source = '''# {{{
    set statusline=%!sushibar#sushibar()
    set laststatus=2
'''# }}}
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''# {{{
    if has("win32")
        let g:vimtex_latexmk_continuous = 1
        let g:vimtex_latexmk_background = 1
        "let g:vimtex_latexmk_options = '-pdf'
        let g:vimtex_latexmk_options = '-pdfdvi'
        "let g:vimtex_latexmk_options = '-pdfps'
        let g:vimtex_view_general_viewer = "SumatraPDF.exe"
        let g:vimtex_view_general_options =
                    \ '-reuse-instance -inverse-search "\"' . $VIM . '\gvim.exe\" -n --remote-silent +\%l \"\%f\"" -forward-search @tex @line @pdf'
        let g:vimtex_view_general_options_latexmk = '-reuse-instance'
        "let g:vimtex_view_general_viewer = 'texworks'
    elseif has("unix")""
        let g:vimtex_latexmk_continuous = 1
        let g:vimtex_latexmk_background = 1
        "let g:vimtex_latexmk_options = '-pdf'
        let g:vimtex_latexmk_options = '-pdfdvi'
        "let g:vimtex_latexmk_options = '-pdfps'
        let g:vimtex_view_general_viewer = 'xdg-open'
        "let g:vimtex_view_general_viewer = 'okular'
        "let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
        "let g:vimtex_view_general_options_latexmk = '--unique'
        "let g:vimtex_view_general_viewer = 'qpdfview'
        "let g:vimtex_view_general_options = '--unique @pdf\#src:@tex:@line:@col'
        "let g:vimtex_view_general_options_latexmk = '--unique'
    endif
'''# }}}
[[plugins]]
repo = "iamcco/markdown-preview.vim"
on_ft = 'markdown'
hook_add = '''# {{{
let g:mkdp_auto_close = 0
let g:mkdp_auto_open = 0
let g:mkdp_auto_start = 0
if has('win32') != 0
    let s:google_chrome_path="C:/Program\ Files/Google/Chrome/Application/chrome.exe"
    let s:google_chrome_path32="C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe"
    if executable(s:google_chrome_path)
        let g:mkdp_path_to_chrome=s:google_chrome_path
    else
        let g:mkdp_path_to_chrome=s:google_chrome_path32
    endif
endif
'''# }}}
[[plugins]]
repo = "thinca/vim-quickrun"
# depends = "vim-watchdogs"
# on_event = "VimEnter"
on_event = "CursorHold"
# on_cmd = 'QuickRun'
hook_post_source = '''# {{{

    let g:quickrun_config = get(g:, 'quickrun_config', {})

    let g:quickrun_config._ = {
                    \ 'runner'    : 'vimproc',
                    \ "runner/vimproc/updatetime" : 100,
                    \ "outputter/quickfix/open_cmd" : "copen 8"
                    \}
                " \ 'runner'    : 'job',
                " \ 'runner/job/interval' : 100,
                " \ 'outputter/buffer/into': 1,
                " \ 'outputter/buffer/close_on_empty' : 0,
                " \ }
    " \ 'runner'    : 'vimproc',
    " \ 'runner/vimproc/updatetime' : 100,
    let g:quickrun_config.python = {
                \ 'command' : 'python',
                \ 'cmdopt' : '-u'
                \ }
    let g:quickrun_config.markdown = {
                \ 'type': 'markdown/pandoc',
                \ 'cmdopt': '-s',
                \ 'outputter': 'browser'
    \ }

    " nnoremap <silent> <Leader>R :QuickRun<CR>
    " nmap <Leader>R <Plug>(quickrun)
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

'''# }}}
[[plugins]]
repo = "osyo-manga/vim-watchdogs"
on_event = 'CursorHold'
depends = [ 'shabadou.vim', 'vim-quickrun' ]
# {{{
hook_post_source = '''

    let g:watchdogs_check_BufWritePost_enable = 1
    let g:watchdogs_check_BufWritePost_enables = {
                \"cpp" : 0
                \}
    let g:watchdogs_check_CursorHold_enable = 0

    " quickrun-hook-add-include-option {{{
    let s:hook = {
                \ "name": "add_include_option",
                \ "kind": "hook",
                \ "config": {
                \   "enable": 0,
                \   },
                \ }

    function! s:hook.on_module_loaded(session, context)
        let paths = filter(split(&path, ","), "len(v:val) && v:val !='.' && v:val !~ 'mingw'")
        if len(paths)
            let a:session.config.cmdopt .= " -I".join(paths, " -I")
        endif
    endfunction
    call quickrun#module#register(s:hook, 1)
    unlet s:hook
    " }}}

    let s:config = {
                \"cpp" : {
                \    "hook/add_include_option/enable" : 1
                \    },
                \"cpp/watchdogs_checker" : {
                \    "type" : "watchdogs_checker/clang++",
                \    "hook/add_include_option/enable" : 1,
                \    "cmdopt" : '-std=c++11 -Wall'
                \   },
                \}
                " \ "vim/watchdogs_checker" : {
                " \   "type" : "watchdogs_checker/vint",
                " \   },
    call extend(g:quickrun_config, s:config)
    unlet s:config

    " if has("job")
    "     let g:quickrun_config["watchdogs_checker/_"] = {
    "                 \ 'runner'    : 'job',
    "                 \ 'runner/job/interval' : 100,
    "                 \ "outputter/quickfix/open_cmd" : "copen 8"
    "                 \}
    " else
        let g:quickrun_config["watchdogs_checker/_"] = {
                    \ 'runner'    : 'vimproc',
                    \ "runner/vimproc/updatetime" : 100,
                    \ "outputter/quickfix/open_cmd" : "copen 8"
                    \}
                    "
     " endif
     call watchdogs#setup(g:quickrun_config)
'''
# }}}
