# vim:set foldmethod=marker:
[[plugins]]
repo = "cohama/lexima.vim"
on_event = "InsertEnter"
hook_post_source = ''' " {{{
	for [begin, end] in [['(', ')'], ['{','}'], ['[',']']]
		call lexima#add_rule({'at': '\%#.*[-0-9a-zA-Z_,:]', 'char': begin, 'input': begin})
		call lexima#add_rule({'at': '\%#\n\s*'.end , 'char': end, 'input': '<CR>'.end, 'delete': end})
	endfor

	for [begin, end] in [['"','"'], ["'","'"]]
		call lexima#add_rule({'at': '\%#.*[-0-9a-zA-Z_,:]', 'char': begin, 'input': begin})
	endfor

	call lexima#init()
	" <BS>,<CR>が文字列ではなく展開されてしまうためうまくいかないので<lt>を利用
	inoremap <expr> <C-h> lexima#expand('<lt>BS>', 'i')
	imap <expr> <CR> pumvisible() ? '<C-y>' : lexima#expand('<lt>CR>', 'i')
''' # }}}
[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c','cpp']
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
[[plugins]]
repo = 't9md/vim-choosewin'
on_event = "VimEnter"
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList']
[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle', 'TagbarOpen']
[[plugins]]
repo = 'basyura/TweetVim.git'
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream', 'TweetVimSay', 'TweetVimCommandSay']
depends = ['bitly.vim', 'twibill.vim', 'neco-tweetvim',  'open-browser.vim']
# HTML CSS JS PLUGINS
[[plugins]]
repo = 'csscomb/vim-csscomb'
on_ft = 'css'
[[plugins]]
repo = 'rdnetto/YCM-Generator'
on_cmd = 'YcmGenerator'
depends = "YouCompleteMe"
[[plugins]]
repo = 'Valloric/YouCompleteMe'
build = 'install.py --clang-completer'
on_event = ['InsertEnter', 'CursorHold']
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
[[plugins]]
repo = "iamcco/markdown-preview.vim"
on_ft = 'markdown'
[[plugins]]
repo = "kannokanno/previm"
on_ft = 'markdown'
[[plugins]]
repo = "thinca/vim-quickrun"
# depends = "vim-watchdogs"
# on_event = "VimEnter"
on_event = "CursorHold"
# on_cmd = 'QuickRun'
hook_post_source = ''' " {{{

	let g:quickrun_config = get(g:, 'quickrun_config', {})

	let g:quickrun_config._ = {
					\ 'runner'	: 'vimproc',
					\ 'runner/vimproc/updatetime' : 100,
					\ 'outputter/quickfix/open_cmd' : 'copen 8',
					\ 'outputter/buffer/split' : 'botright 10'
					\}
				" \ 'runner'	: 'job',
				" \ 'runner/job/interval' : 100,
				" \ 'outputter/buffer/into': 1,
				" \ 'outputter/buffer/close_on_empty' : 0,
				" \ }
	" \ 'runner'	: 'vimproc',
	" \ 'runner/vimproc/updatetime' : 100,
	let g:quickrun_config.python = {
				\ 'command' : 'python',
				\ 'cmdopt' : '-u'
				\ }
	let g:quickrun_config.markdown = {
				\ 'type': 'markdown/pandoc',
				\ 'cmdopt': '-s',
				\ 'outputter': 'browser'
	\ }

	" nnoremap <silent> <Leader>R :QuickRun<CR>
	" nmap <Leader>R <Plug>(quickrun)
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? <SID>myvimrc_quickrun_sweep() : "\<C-c>"
	fun! s:myvimrc_quickrun_sweep()
		echo "Quickrun Sweep"
		call quickrun#sweep_sessions()
	endf
''' # }}}
[[plugins]]
repo = "osyo-manga/vim-watchdogs"
on_event = 'CursorHold'
depends = [ 'shabadou.vim', 'vim-quickrun' ]
hook_post_source = ''' " {{{

	let g:watchdogs_check_BufWritePost_enable = 1
	let g:watchdogs_check_BufWritePost_enables = {
				\"cpp" : 0
				\}
	let g:watchdogs_check_CursorHold_enable = 0

	" quickrun-hook-add-include-option {{{
	let s:hook = {
				\ "name": "add_include_option",
				\ "kind": "hook",
				\ "config": {
				\   "enable": 0,
				\   },
				\ }

	function! s:hook.on_module_loaded(session, context)
		let paths = filter(split(&path, ","), "len(v:val) && v:val !='.' && v:val !~ 'mingw'")
		if len(paths)
			let a:session.config.cmdopt .= " -I".join(paths, " -I")
		endif
	endfunction
	call quickrun#module#register(s:hook, 1)
	unlet s:hook
	" }}}

	let s:config = {
				\"cpp" : {
				\	"hook/add_include_option/enable" : 1
				\	},
				\"cpp/watchdogs_checker" : {
				\	"type" : "watchdogs_checker/clang++",
				\	"hook/add_include_option/enable" : 1,
				\	"cmdopt" : '-std=c++11 -Wall'
				\   },
				\}
				" \ "vim/watchdogs_checker" : {
				" \   "type" : "watchdogs_checker/vint",
				" \   },
	call extend(g:quickrun_config, s:config)
	unlet s:config

	" if has("job")
	"	 let g:quickrun_config["watchdogs_checker/_"] = {
	"				 \ 'runner'	: 'job',
	"				 \ 'runner/job/interval' : 100,
	"				 \ "outputter/quickfix/open_cmd" : "copen 8"
	"				 \}
	" else
		let g:quickrun_config["watchdogs_checker/_"] = {
					\ 'runner'	: 'vimproc',
					\ "runner/vimproc/updatetime" : 100,
					\ "outputter/quickfix/open_cmd" : "copen 8"
					\}
					"
	 " endif
	 call watchdogs#setup(g:quickrun_config)
''' # }}}
[[plugins]]
repo = "bkad/CamelCaseMotion"
on_map = ['n', ',']
hook_post_source = ''' " {{{
	call camelcasemotion#CreateMotionMappings(',')
''' # }}}
[[plugins]]
repo = 'kana/vim-submode'
on_map = ['n', '<C-w>']
hook_post_source = ''' " {{{
	call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
	call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
	call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
	call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
	call submode#map('winsize', 'n', '', '>', '<C-w>>')
	call submode#map('winsize', 'n', '', '<', '<C-w><')
	call submode#map('winsize', 'n', '', '+', '<C-w>+')
	call submode#map('winsize', 'n', '', '-', '<C-w>-')
''' # }}}
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite', 'UniteWithBufferDir']
[[plugins]]
repo = "osyo-manga/vim-brightest"
on_event = ['CursorHold']
# on_cmd = ['BrightestEnable']
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = "CursorHold"
# on_cmd = ["PreciousReset", "PreciousSwitch"]
depends = ['context_filetype.vim']
hook_post_source = ''' " {{{
	" let g:context_filetype#search_offset = 300
	let g:precious_enable_switch_CursorMoved = { '*' : 0 }
	let g:precious_enable_switch_CursorHold = { '*' : 1 }
	" INSERTモードのON／OFFに合わせてトグル
	augroup PreciousAuto
		autocmd!
		autocmd InsertEnter * :PreciousSwitch
		autocmd InsertLeave * :PreciousSwitch
	augroup END
	" setfiletype を無効
	" let g:precious_enable_switchers = {
	" \	"*" : {
	" \		"setfiletype" : 0,
	" \	},
	" \}
	" augroup test
	"	 autocmd!
	"	 autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
	" augroup END
''' # }}}
[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = 'python'
# [[plugins]]
# repo = 'scrooloose/nerdtree'
# on_event = 'VimEnter'
# hook_post_source = '''
#	 nnoremap <Leader>e :NERDTreeFind<CR>
#	 nnoremap <Leader>E :NERDTreeCWD<CR>
# '''
# [[plugins]]
# repo = "sjl/gundo.vim"
# on_if = 'has("python")'
# hook_post_source = '''
#	 nnoremap <Leader>gu :<C-u>GundoToggle<cr>
# '''
