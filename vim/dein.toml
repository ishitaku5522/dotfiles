# vim: set foldmethod=marker:
[[plugins]]
repo = 'tpope/vim-dispatch'
[[plugins]]
repo = 'Shougo/vimproc.vim'# {{{
build = 'make'# }}}
[[plugins]]
repo = 'Shougo/unite.vim'# {{{
hook_add = '''
    "==================================================
    "UNITE
    "==================================================
    " ÂÖ•Âäõ„É¢„Éº„Éâ„ÅßÈñãÂßã„Åô„Çã
    let g:unite_force_overwrite_statusline = 0
    let g:unite_enable_start_insert = 0
    nnoremap <silent> <Leader>ub :<C-u>Unite buffer<CR>
    nnoremap <silent> <Leader>uf :<C-u>UniteWithBufferDir -buffer-name=files -start-insert file_rec/async<CR>
    nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> <Leader>um :<C-u>Unite file_mru<CR>
    nnoremap <silent> <Leader>uu :<C-u>Unite buffer file_mru<CR>
    " Unite All
    nnoremap <silent> <Leader>ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
    " UniteOutLine
    nnoremap <silent> <Leader>uo :<C-u>Unite -vertical -no-quit -winwidth=40 outline -direction=botright<CR>
    " „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÂàÜÂâ≤„Åó„Å¶Èñã„Åè
    au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    " „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÁ∏¶„Å´ÂàÜÂâ≤„Åó„Å¶Èñã„Åè
    au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    " „Çø„Éñ„ÅßÈñã„Åè
    au FileType unite nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    au FileType unite inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    " ESC„Ç≠„Éº„Çí2ÂõûÊäº„Åô„Å®ÁµÇ‰∫Ü„Åô„Çã
    au FileType unite nmap <silent> <buffer> <ESC><ESC> q
    au FileType unite imap <silent> <buffer> <ESC><ESC> <ESC>q

    "nice unite and ag
    " let g:unite_source_history_yank_enable = 1
    " try
    let g:unite_source_rec_async_command =
                \ ['ag', '--follow', '--nocolor', '--nogroup',
                \  '--hidden', '-g', '']
    let g:unite_source_rec_max_cache_files = 5000
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    " catch
    " endtry
    " search a file in the filetree
    " nnoremap <space><space> :<C-u>Unite -start-insert file_rec/async<cr>
    " reset not it is <C-l> normally
    " nnoremap <space>r <Plug>(unite_restart)
'''# }}}
[[plugins]]
repo = 'Shougo/unite-outline'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/neomru.vim'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'ujihisa/unite-colorscheme'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/neossh.vim' # {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/vimshell.vim'# {{{
depends = ['vimproc.vim']
hook_add = '''
let g:vimshell_prompt = "% "
let g:vimshell_secondary_prompt = "> "
let g:vimshell_user_prompt = 'getcwd()'
'''# }}}
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'# {{{
hook_add = '''
    " let g:ctrlp_cmd = "CtrlPMRUFiles"
    let g:ctrlp_extensions = ['mixed']
    let g:ctrlp_max_files = 5000
    nnoremap <leader>pm :<c-u>CtrlPMRUFiles<cr>
    nnoremap <leader>pc :<C-u>CtrlPCurWD<cr>
    nnoremap <space><space> :<C-u>CtrlPCurWD<cr>
    nnoremap <leader>pr :<C-u>CtrlPClearCache<cr>
    if executable('ag')
        if !has("win32")
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag %s -i --follow --nocolor --nogroup -g ""'
        else
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag -i --follow --nocolor --nogroup -g "" %s'
        endif
    endif
'''# }}}
# [[plugins]]
# repo = 'mattn/ctrlp-filer'# {{{
# depends = 'ctrlpvim/ctrlp.vim'# }}}
[[plugins]]
repo = 'easymotion/vim-easymotion'# {{{
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''# }}}
[[plugins]]
repo = 'kana/vim-submode'# {{{
hook_add = '''
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''# }}}
[[plugins]]
repo = "tyru/restart.vim"
[[plugins]]
repo = 'superbrothers/vim-vimperator'
[[plugins]]
repo = "iamcco/markdown-preview.vim"# {{{
hook_add = '''
let g:mkdp_auto_close = 0
let g:mkdp_auto_open = 0
let g:mkdp_auto_start = 0
if has('win32') != 0
    let s:google_chrome_path="C:/Program\ Files/Google/Chrome/Application/chrome.exe"
    let s:google_chrome_path32="C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe"
    if executable(s:google_chrome_path)
        let g:mkdp_path_to_chrome=s:google_chrome_path
    else
        let g:mkdp_path_to_chrome=s:google_chrome_path32
    endif
endif
'''# }}}
# [[plugins]]
# repo = "Yggdroot/indentLine"# {{{
# hook_add = '''
#     let g:indentLine_color_term = 238
#     let g:indentLine_color_gui = "#3B4048"
# '''# }}}
[[plugins]]
repo = "nathanaelkane/vim-indent-guides"# {{{
hook_add = '''
    let g:indent_guides_guide_size = 0
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_start_level = 1
    let g:indent_guides_enable_on_vim_startup = 1
    if has("gui_running")
        let g:indent_guides_auto_colors = 1
    else
        let g:indent_guides_auto_colors = 0
        " summerfruit256
        "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=255
       " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=254

        " onedark
         autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=234
         autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
    endif
'''# }}}
# [[plugins]]
# repo = "szw/vim-tags"# {{{
# hook_add = '''
#     let g:vim_tags_auto_generate = 1
#     let g:vim_tags_use_vim_dispatch = 1
#     let g:vim_tags_project_tags_command = "{CTAGS} -R {OPTIONS} {DIRECTORY}"
# '''# }}}

# FOLD PLUGINS {{{
[[plugins]]
repo = 'LeafCage/foldCC.vim'# {{{
hook_add = '''
    let g:foldCCtext_enable_autofdc_adjuster = 1
    let g:foldCCtext_head = ''
    " let g:foldCCtext_tail = '"(ÔæüÔΩ™Ôæü  )". (v:foldend-v:foldstart+1)'

    let g:foldCCtext_tail = 'printf(" %4d lines Lv%-2d", v:foldend-v:foldstart+1, v:foldlevel)'

    set foldtext=FoldCCtext()
    set foldcolumn=2
    set fillchars=vert:\|
    " augroup FoldCC "{{{
    "     hi Folded gui=bold guibg=Grey28 guifg=gray80
    "     hi FoldColumn guibg=Grey14 guifg=gray80
    "
    "     " hi Folded gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey50 guifg=Grey80
    "     " hi FoldColumn gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
    " augroup END "}}}
'''# }}}
[[plugins]]
repo = 'Konfekt/FastFold'
# }}}
# STATUSLINE PLUGINS {{{
[[plugins]]
repo = 'vim-airline/vim-airline'#{{{
hook_add = '''
    let g:airline_theme='onedark'

    let g:airline#extensions#branch#enabled        = 1
    let g:airline#extensions#branch#empty_message  = ''
    " let g:airline#extensions#whitespace#checks     = [ 'indent',  'mixed-indent-file' ]
    let g:airline#extensions#syntastic#enabled     = 0

    let g:airline#extensions#tabline#enabled       = 1 "{{{
    " right side show mode
    let g:airline#extensions#tabline#show_tab_type = 0
    " „Éó„É¨„Éì„É•„Éº„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥(AirlineÂÑ™ÂÖà:0„Åã,‰ªñ„ÅÆ„Éó„É©„Ç∞„Ç§„É≥ÂÑ™ÂÖà:1)
    let g:airline#extensions#tabline#exclude_preview = 0
    let g:airline#extensions#tabline#show_tabs = 1
    let g:airline#extensions#tabline#show_splits   = 0
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type   = 2 " splits and tab number
    let g:airline#extensions#tabline#show_close_button = 1 "}}}

    " let g:airline_powerline_fonts=1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    " powerline symbols" {{{
    if has("gui_running") && !has("win32")
        let g:airline#extensions#tabline#left_sep      = '‚ÆÄ'
        let g:airline#extensions#tabline#left_alt_sep  = '‚ÆÅ'
        let g:airline#extensions#tabline#right_sep     = '‚ÆÇ'
        let g:airline#extensions#tabline#right_alt_sep = '‚ÆÉ'
        let g:airline_left_sep           = '‚ÆÄ'
        let g:airline_left_alt_sep       = '‚ÆÅ'
        let g:airline_right_sep          = '‚ÆÇ'
        let g:airline_right_alt_sep      = '‚ÆÉ'
        let g:airline_symbols.branch     = '‚≠†'
        let g:airline_symbols.readonly   = '‚≠§'
        let g:airline_symbols.linenr     = '‚≠°'
    else
        let g:airline_left_sep           = ''
        let g:airline_left_alt_sep       = ''
        let g:airline_right_sep          = ''
        let g:airline_right_alt_sep      = ''
    endif" }}}

    " unicode symobols# {{{
    " let g:airline_symbols.crypt = 'üîí'
    " let g:airline_symbols.linenr = '‚êä'
    " let g:airline_symbols.linenr = '‚ê§'
    " let g:airline_symbols.linenr = '¬∂'
    " let g:airline_symbols.maxlinenr = '‚ò∞'
    " let g:airline_symbols.maxlinenr = ''
    " let g:airline_symbols.branch = '‚éá'
    " let g:airline_symbols.paste = 'œÅ'
    " let g:airline_symbols.paste = '√û'
    " let g:airline_symbols.paste = '‚à•'
    " let g:airline_symbols.spell = 'Íû®'
    " let g:airline_symbols.notexists = '‚àÑ'
    " let g:airline_symbols.whitespace = 'Œû'# }}}

    " disable warning " {{{
    " let g:airline#extensions#default#layout = [
    "             \ [ 'a', 'b', 'c' ],
    "             \ [ 'x', 'y', 'z' ]
    "             \ ] " }}}
'''
# }}}
# [[plugins]]
# repo = 'itchyny/lightline.vim'#{{{
# hook_add = '''
# if v:version >= 800 " „Éê„Éº„Ç∏„Éß„É≥Ôºò‰ª•Èôç„Å™„ÇâTimer‰Ωø„Å£„Å¶ÊôÇÂàªË°®Á§∫ " {{{
#     let g:currenttime = strftime("%HÊôÇ%MÂàÜ%SÁßí")
#
#     function! SetCurrentTime()
#         let tempTimer = timer_start(1000, 'CheckTemp', {'repeat' : -1})
#         function! CheckTemp(tempTimer)
#             let g:currenttime = strftime("%HÊôÇ%MÂàÜ%SÁßí")
#             try
#                 call lightline#update()
#             catch /.*/
#                 call timer_stop(a:tempTimer)
#             endtry
#         endfunction
#     endfunction
#
#     call SetCurrentTime()
#
# else
#     let g:currenttime = ""
# endif " }}}
#
# function! ReturnCurrentTime() " {{{
#     if &filetype == 'vimfiler'
#         return ''
#     else
#     return g:currenttime
# endfunction# }}}
#
#
# " {{{
# let g:lightline = {
#             \ 'colorscheme': 'onedark_custom',
#             \ 'active': {
#             \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark', 'ctrlpcurrent', 'ctrlpnext'] ],
#             \   'right': [ [ 'syntastic','lineinfo','currenttime' ,'truncate'], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
#             \ },
#             \ 'inactive': {
#             \ 'left': [ [ 'filename' ] ],
#             \ 'right': [ [ 'lineinfo'],
#             \            [ 'percent' ] ]
#             \ },
#             " \ 'tab': {
#             " \ 'active': [ 'tabnum', 'absolutepath', 'modified' ]
#             " \ },
#             " \ 'tabline': {
#             " \ 'left': [['tabs']],
#             " \ 'right': [['currenttime','close']]
#             " \ },
#             \ 'component_function': {
#             \   'fugitive': 'LightLineFugitive',
#             \   'filename': 'LightLineFilename',
#             \   'fileformat': 'LightLineFileformat',
#             \   'filetype': 'LightLineFiletype',
#             \   'fileencoding': 'LightLineFileencoding',
#             \   'mode': 'LightLineMode',
#             \   'ctrlpmark': 'CtrlPMark',
#             \   'ctrlpnext': 'CtrlPNext',
#             \   'currenttime': 'ReturnCurrentTime',
#             \ },
#             \ 'component_expand': {
#             \   'syntastic': 'SyntasticStatuslineFlag',
#             \    'ctrlpcurrent': 'CtrlPCurrent'
#             \ },
#              \ 'component': {
#              \    'truncate': '%<',
#             " \    'absolutepath': '%F'
#             \ },
#             \ 'component_type': {
#             \   'syntastic': 'error',
#             \   'ctrlpcurrent': 'left',
#             \ },
#             \ 'subseparator': { 'left': '|', 'right': '|' }
#             \ }
#             if has("gui_running")
#                 let g:lightline.separator = {
#                             \    'left': '‚ÆÄ', 'right': '‚ÆÇ'
#                             \    }
#                 let g:lightline.subseparator = {
#                             \    'left': '‚ÆÅ', 'right': '‚ÆÉ'
#                             \}
#             endif " }}}
#
#     function! LightLineModified() " {{{
#       return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
#     endfunction " }}}
#
#     function! LightLineReadonly() " {{{
#         if has("gui_running")
#             return &ft !~? 'help\|vimfiler' && &readonly ? '‚≠§' : ''
#         else
#             return &ft !~? 'help\|vimfiler' && &readonly ? '[RO]' : ''
#         endif
#     endfunction " }}}
#
#     function! LightLineFilename() " {{{
#       let fname = expand('%:t')
#       return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ?
#                   \ lightline#concatenate([g:lightline.ctrlp_byfname, g:lightline.ctrlp_regex_string],0) :
#             \ fname == '__Tagbar__' ? g:lightline.fname :
#             \ fname =~ '__Gundo\|NERD_tree' ? '' :
#             \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
#             \ &ft == 'unite' ? unite#get_status_string() :
#             \ &ft == 'vimshell' ? vimshell#get_status_string() :
#             \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
#             \ ('' != fname ? fname : '[No Name]') .
#             \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
#     endfunction  " }}}
#
#     function! LightLineFugitive() " {{{
#         try
#             if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
#                 let branch = fugitive#head()
#                 " return branch !=# '' ? mark.branch : ''
#                 if has("gui_running")
#                     return branch !=# '' ? '‚≠† '.branch : ''
#                 else
#                     return branch !=# '' ? 'BR:['.branch.']' : ''
#                 endif
#             endif
#         catch
#         endtry
#         return ''
#     endfunction " }}}
#
#     function! LightLineFileformat() " {{{
#       return winwidth(0) > 70 ? &fileformat : ''
#     endfunction " }}}
#
#     function! LightLineFiletype() " {{{
#       return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
#     endfunction " }}}
#
#     function! LightLineFileencoding() " {{{
#       return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
#     endfunction " }}}
#
#     function! LightLineMode() " {{{
#       let fname = expand('%:t')
#       return fname == '__Tagbar__' ? 'Tagbar' :
#             \ fname == 'ControlP' ? 'CtrlP' :
#             \ fname == '__Gundo__' ? 'Gundo' :
#             \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
#             \ fname =~ 'NERD_tree' ? 'NERDTree' :
#             \ &ft == 'unite' ? 'Unite' :
#             \ &ft == 'vimfiler' ? 'VimFiler' :
#             \ &ft == 'vimshell' ? 'VimShell' :
#             \ lightline#mode()
#             " \ winwidth(0) > 60 ? lightline#mode() : ''
#     endfunction " }}}
#
#     function! CtrlPMark() " {{{
#         if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
#             call lightline#link('iv'[g:lightline.ctrlp_regex])
#             return g:lightline.ctrlp_prev
#             " return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
#             "       \ , g:lightline.ctrlp_next], 0)
#         else
#             return ''
#         endif
#     endfunction " }}}
#
#     function! CtrlPCurrent() " {{{
#         if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
#             return g:lightline.ctrlp_item
#         else
#             return ''
#         endif
#     endfunction " }}}
#
#     function! CtrlPNext() abort " {{{
#         if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
#             return g:lightline.ctrlp_next
#         else
#             return ''
#         endif
#     endfunction " }}}
#
#     let g:ctrlp_status_func = {}
#     let g:ctrlp_status_func = {
#       \ 'main': 'CtrlPStatusFunc_1',
#       \ 'prog': 'CtrlPStatusFunc_2',
#       \ }
#
#     function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked) " {{{
#         let g:lightline.ctrlp_byfname = a:byfname
#         let g:lightline.ctrlp_regex = a:regex
#         let g:lightline.ctrlp_regex_string = a:regex==1 ? "regex" : ""
#         let g:lightline.ctrlp_prev = a:prev
#         let g:lightline.ctrlp_item = a:item
#         let g:lightline.ctrlp_next = a:next
#         return lightline#statusline(0)
#     endfunction " }}}
#
#     function! CtrlPStatusFunc_2(str) " {{{
#         return a:str
#     endfunction " }}}
#
#     let g:tagbar_status_func = 'TagbarStatusFunc'
#
#     function! TagbarStatusFunc(current, sort, fname, ...) abort " {{{
#         let g:lightline.fname = a:fname
#       return lightline#statusline(0)
#     endfunction " }}}
#
#      " augroup AutoSyntastic
#      "   autocmd!
#      "   autocmd BufWritePost *.c,*.cpp call s:syntastic()
#      " augroup END
#     function! s:syntastic() " {{{
#       SyntasticCheck
#       call lightline#update()
#     endfunction " }}}
#
#     let g:unite_force_overwrite_statusline = 0
#     let g:vimfiler_force_overwrite_statusline = 0
#     let g:vimshell_force_overwrite_statusline = 0
# '''
# # }}}
# }}}
# PLUGINS FOR JAPANESE LANGUAGES {{{
[[plugins]]
repo = "haya14busa/vim-migemo"
[[plugins]]
repo = "vim-jp/vimdoc-ja"
# }}}
[[plugins]]
repo = 'tpope/vim-fugitive'
# }}}
[[plugins]]
repo = "dbakker/vim-lint"
# [[plugins]]
# repo = "Kuniwak/vint"
[[plugins]]
repo = 'tyru/open-browser.vim.git' # {{{
hook_add = '''
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''# }}}
[[plugins]]
repo = "tmux-plugins/vim-tmux"
[[plugins]]
repo = "osyo-manga/vim-anzu"# {{{
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
" nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):noh<CR>


" statusline
set statusline=%{anzu#search_status()}


" if start anzu-mode key mapping
" anzu-mode is anzu(12/51) in screen
" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)
'''# }}}
 # [[plugins]]
 # repo = 'justinmk/vim-dirvish'
 # [[plugins]]
 # repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'Valloric/YouCompleteMe'# {{{
# on_cmd = 'YcmCompleter'
hook_add = '''
    let g:ycm_global_ycm_extra_conf =
                \'~/.vim/dein/repos/github.com/Valloric/YouCompleteMe
                \/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'


    " setting of the which python is used
    if has("unix")
        let g:ycm_python_binary_path = "/usr/bin/python"
        " let g:ycm_python_binary_path = "/usr/bin/python3"
    endif
'''# }}}
[[plugins]]
repo = "osyo-manga/shabadou.vim"
[[plugins]]
repo =  'othree/html5.vim'# {{{
on_ft = ['html']
hook_add = '''
    let g:html5_event_handler_attributes_complete = 1
    let g:html5_rdfa_attributes_complete = 1
    let g:html5_microdata_attributes_complete = 1
    let g:html5_aria_attributes_complete = 1
'''# }}}
[[plugins]]
repo = 'yomi322/neco-tweetvim.git'
[[plugins]]
repo =  'vim-scripts/JavaScript-Indent'# {{{
on_ft = 'javascript'# }}}
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'gregsexton/MatchTag'# {{{
on_ft = ['html','xml']# }}}
[[plugins]]
repo = 'basyura/twibill.vim.git'# {{{
depends = ['open-browser.vim']# }}}
[[plugins]]
repo = 'basyura/bitly.vim.git'
