# vim: set foldmethod=marker:
[[plugins]]
repo = 'tpope/vim-dispatch'
[[plugins]]
repo = 'Shougo/vimproc.vim'# {{{
build = 'make'# }}}
[[plugins]]
repo = 'Shougo/unite-outline'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/neomru.vim'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'ujihisa/unite-colorscheme'# {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/neossh.vim' # {{{
depends = ['unite.vim']# }}}
[[plugins]]
repo = 'Shougo/vimshell.vim'# {{{
depends = ['vimproc.vim']
hook_add = '''
let g:vimshell_prompt = "% "
let g:vimshell_secondary_prompt = "> "
let g:vimshell_user_prompt = 'getcwd()'
'''# }}}
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'# {{{
hook_add = '''
    " let g:ctrlp_cmd = "CtrlPMRUFiles"
    let g:ctrlp_extensions = ['mixed']
    let g:ctrlp_max_files = 5000
    nnoremap <leader>pm :<c-u>CtrlPMRUFiles<cr>
    nnoremap <leader>pc :<C-u>CtrlPCurWD<cr>
    nnoremap <space><space> :<C-u>CtrlPCurWD<cr>
    nnoremap <leader>pr :<C-u>CtrlPClearCache<cr>
    if executable('ag')
        if !has("win32")
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag %s -i --follow --nocolor --nogroup -g ""'
        else
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag -i --follow --nocolor --nogroup -g "" %s'
        endif
    endif
'''# }}}
[[plugins]]
repo = 'easymotion/vim-easymotion'# {{{
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''# }}}
[[plugins]]
repo = 'kana/vim-submode'# {{{
hook_add = '''
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''# }}}
[[plugins]]
repo = "tyru/restart.vim"
[[plugins]]
repo = 'superbrothers/vim-vimperator'
[[plugins]]
repo = "iamcco/markdown-preview.vim"# {{{
hook_add = '''
let g:mkdp_auto_close = 0
let g:mkdp_auto_open = 0
let g:mkdp_auto_start = 0
if has('win32') != 0
    let s:google_chrome_path="C:/Program\ Files/Google/Chrome/Application/chrome.exe"
    let s:google_chrome_path32="C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe"
    if executable(s:google_chrome_path)
        let g:mkdp_path_to_chrome=s:google_chrome_path
    else
        let g:mkdp_path_to_chrome=s:google_chrome_path32
    endif
endif
'''# }}}
[[plugins]]
repo = "nathanaelkane/vim-indent-guides"# {{{
hook_add = '''
    let g:indent_guides_guide_size = 0
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_start_level = 1
    let g:indent_guides_enable_on_vim_startup = 1
    if has("gui_running")
        let g:indent_guides_auto_colors = 1
    else
        let g:indent_guides_auto_colors = 0
        " summerfruit256
        "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=255
       " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=254

        " onedark
         autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=234
         autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
    endif
'''# }}}
# FOLD PLUGINS {{{
[[plugins]]
repo = 'LeafCage/foldCC.vim'# {{{
hook_add = '''
    let g:foldCCtext_enable_autofdc_adjuster = 1
    let g:foldCCtext_head = ''
    " let g:foldCCtext_tail = '"(ÔæüÔΩ™Ôæü  )". (v:foldend-v:foldstart+1)'

    let g:foldCCtext_tail = 'printf(" %4d lines Lv%-2d", v:foldend-v:foldstart+1, v:foldlevel)'

    set foldtext=FoldCCtext()
    set foldcolumn=2
    set fillchars=vert:\|
    " augroup FoldCC "{{{
    "     hi Folded gui=bold guibg=Grey28 guifg=gray80
    "     hi FoldColumn guibg=Grey14 guifg=gray80
    "
    "     " hi Folded gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey50 guifg=Grey80
    "     " hi FoldColumn gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
    " augroup END "}}}
'''# }}}
[[plugins]]
repo = 'Konfekt/FastFold'
# }}}
# STATUSLINE PLUGINS {{{
[[plugins]]
repo = 'vim-airline/vim-airline'#{{{
hook_add = '''
    let g:airline_theme='onedark'

    let g:airline#extensions#branch#enabled        = 1
    let g:airline#extensions#branch#empty_message  = ''
    " let g:airline#extensions#whitespace#checks     = [ 'indent',  'mixed-indent-file' ]
    let g:airline#extensions#syntastic#enabled     = 0

    let g:airline#extensions#tabline#enabled       = 1 "{{{
    " right side show mode
    let g:airline#extensions#tabline#show_tab_type = 0
    " „Éó„É¨„Éì„É•„Éº„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥(AirlineÂÑ™ÂÖà:0„Åã,‰ªñ„ÅÆ„Éó„É©„Ç∞„Ç§„É≥ÂÑ™ÂÖà:1)
    let g:airline#extensions#tabline#exclude_preview = 0
    let g:airline#extensions#tabline#show_tabs = 1
    let g:airline#extensions#tabline#show_splits   = 0
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type   = 2 " splits and tab number
    let g:airline#extensions#tabline#show_close_button = 1 "}}}

    " let g:airline_powerline_fonts=1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    " powerline symbols" {{{
    if has("gui_running") && !has("win32")
        let g:airline#extensions#tabline#left_sep      = '‚ÆÄ'
        let g:airline#extensions#tabline#left_alt_sep  = '‚ÆÅ'
        let g:airline#extensions#tabline#right_sep     = '‚ÆÇ'
        let g:airline#extensions#tabline#right_alt_sep = '‚ÆÉ'
        let g:airline_left_sep           = '‚ÆÄ'
        let g:airline_left_alt_sep       = '‚ÆÅ'
        let g:airline_right_sep          = '‚ÆÇ'
        let g:airline_right_alt_sep      = '‚ÆÉ'
        let g:airline_symbols.branch     = '‚≠†'
        let g:airline_symbols.readonly   = '‚≠§'
        let g:airline_symbols.linenr     = '‚≠°'
    else
        let g:airline_left_sep           = ''
        let g:airline_left_alt_sep       = ''
        let g:airline_right_sep          = ''
        let g:airline_right_alt_sep      = ''
    endif" }}}

    " unicode symobols# {{{
    " let g:airline_symbols.crypt = 'üîí'
    " let g:airline_symbols.linenr = '‚êä'
    " let g:airline_symbols.linenr = '‚ê§'
    " let g:airline_symbols.linenr = '¬∂'
    " let g:airline_symbols.maxlinenr = '‚ò∞'
    " let g:airline_symbols.maxlinenr = ''
    " let g:airline_symbols.branch = '‚éá'
    " let g:airline_symbols.paste = 'œÅ'
    " let g:airline_symbols.paste = '√û'
    " let g:airline_symbols.paste = '‚à•'
    " let g:airline_symbols.spell = 'Íû®'
    " let g:airline_symbols.notexists = '‚àÑ'
    " let g:airline_symbols.whitespace = 'Œû'# }}}

    " disable warning " {{{
    " let g:airline#extensions#default#layout = [
    "             \ [ 'a', 'b', 'c' ],
    "             \ [ 'x', 'y', 'z' ]
    "             \ ] " }}}
'''
# }}}
# PLUGINS FOR JAPANESE LANGUAGES {{{
[[plugins]]
repo = "haya14busa/vim-migemo"
[[plugins]]
repo = "vim-jp/vimdoc-ja"
# }}}
[[plugins]]
repo = 'tpope/vim-fugitive'
# }}}
[[plugins]]
repo = "dbakker/vim-lint"
# [[plugins]]
# repo = "Kuniwak/vint"
[[plugins]]
repo = 'tyru/open-browser.vim.git' # {{{
hook_add = '''
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''# }}}
[[plugins]]
repo = "tmux-plugins/vim-tmux"
[[plugins]]
repo = "osyo-manga/vim-anzu"# {{{
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
" nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):noh<CR>


" statusline
set statusline=%{anzu#search_status()}


" if start anzu-mode key mapping
" anzu-mode is anzu(12/51) in screen
" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)
'''# }}}
 # [[plugins]]
 # repo = 'justinmk/vim-dirvish'
 # [[plugins]]
 # repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'Valloric/YouCompleteMe'# {{{
# on_cmd = 'YcmCompleter'
hook_add = '''
    let g:ycm_global_ycm_extra_conf =
                \'~/.vim/dein/repos/github.com/Valloric/YouCompleteMe
                \/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'


    " setting of the which python is used
    if has("unix")
        let g:ycm_python_binary_path = "/usr/bin/python"
        " let g:ycm_python_binary_path = "/usr/bin/python3"
    endif
'''# }}}
[[plugins]]
repo = "osyo-manga/shabadou.vim"
[[plugins]]
repo =  'othree/html5.vim'# {{{
on_ft = ['html']
hook_add = '''
    let g:html5_event_handler_attributes_complete = 1
    let g:html5_rdfa_attributes_complete = 1
    let g:html5_microdata_attributes_complete = 1
    let g:html5_aria_attributes_complete = 1
'''# }}}
[[plugins]]
repo = 'yomi322/neco-tweetvim.git'
[[plugins]]
repo =  'vim-scripts/JavaScript-Indent'# {{{
on_ft = 'javascript'# }}}
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'gregsexton/MatchTag'# {{{
on_ft = ['html','xml']# }}}
[[plugins]]
repo = 'basyura/twibill.vim.git'# {{{
depends = ['open-browser.vim']# }}}
[[plugins]]
repo = 'basyura/bitly.vim.git'
