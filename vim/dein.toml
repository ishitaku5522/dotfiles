# vim: set foldmethod=marker:
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
	"==================================================
	"UNITE
	"==================================================
	" ÂÖ•Âäõ„É¢„Éº„Éâ„ÅßÈñãÂßã„Åô„Çã
	let g:unite_force_overwrite_statusline = 0
	let g:unite_enable_start_insert = 0
	nnoremap <silent> <Leader>ub :<C-u>Unite buffer<CR>
	nnoremap <silent> <Leader>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
	nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
	nnoremap <silent> <Leader>um :<C-u>Unite file_mru<CR>
	nnoremap <silent> <Leader>uu :<C-u>Unite buffer file_mru<CR>
	" Unite All
	nnoremap <silent> <Leader>ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
	" UniteOutLine
	nnoremap <silent> <Leader>uo :<C-u>Unite -vertical -no-quit -winwidth=40 outline -direction=botright<CR>
	" „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÂàÜÂâ≤„Åó„Å¶Èñã„Åè
	au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
	au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
	" „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÁ∏¶„Å´ÂàÜÂâ≤„Åó„Å¶Èñã„Åè
	au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
	au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
	" „Çø„Éñ„ÅßÈñã„Åè
	au FileType unite nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
	au FileType unite inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
	" ESC„Ç≠„Éº„Çí2ÂõûÊäº„Åô„Å®ÁµÇ‰∫Ü„Åô„Çã
	au FileType unite nmap <silent> <buffer> <ESC><ESC> q
	au FileType unite imap <silent> <buffer> <ESC><ESC> <ESC>q
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['unite.vim']

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = ['unite.vim']

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
depends = ['unite.vim']

[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vimproc.vim']

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
	call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
	call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
	call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
	call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
	call submode#map('winsize', 'n', '', '>', '<C-w>>')
	call submode#map('winsize', 'n', '', '<', '<C-w><')
	call submode#map('winsize', 'n', '', '+', '<C-w>+')
	call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tyru/caw.vim.git'

[[plugins]]
repo = 'https://github.com/mattn/webapi-vim.git'

#OPEN BROWSER
[[plugins]]
repo = 'https://github.com/tyru/open-browser.vim.git'

[[plugins]]
repo = "syngan/vim-vimlint"
depends = "vim-vimlparser"

[[plugins]]
repo = "ynkdir/vim-vimlparser"

# [[plugins]]
# repo = "osyo-manga/shabadou.vim"

# [[plugins]]
# repo = "osyo-manga/vim-watchdogs"
# depends = 'syntastic'
# hook_add = '''
# 	let g:watchdogs_check_BufWritePost_enable = 1
# 	let g:watchdogs_check_CursorHold_enable = 1
# 	call watchdogs#setup(g:quickrun_config)
# '''


[[plugins]]
repo = 'superbrothers/vim-vimperator'

[[plugins]]
repo = 'tpope/vim-surround'

# [[plugins]]
# repo = 'vim-scripts/TagHighlight'

# [[plugins]]
# repo = 'majutsushi/tagbar'
# hook_add = '''
#
# 		nnoremap <silent> <Leader>t :TagbarToggle<CR>
# 		let g:tagbar_autofocus = 1
# 		let g:tagbar_show_linenumbers = 1
# 		let g:tagbar_width = 30
# 		let g:tagbar_autoclose = 1
#
# '''
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''

hi Folded ctermbg=none
hi FoldColumn ctermbg=none
set foldtext=FoldCCtext()
set foldcolumn=2
set fillchars=vert:\|
" augroup FoldCC "{{{
"     hi Folded gui=bold guibg=Grey28 guifg=gray80
"     hi FoldColumn guibg=Grey14 guifg=gray80
"
"     " hi Folded gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey50 guifg=Grey80
"     " hi FoldColumn gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
" augroup END "}}}
'''
# # Airline vim {{{
# [[plugins]]
# repo = 'vim-airline/vim-airline'
# hook_add = '''
# 	let g:airline_theme='onedark'
#
# 	let g:airline#extensions#branch#enabled        = 1
# 	let g:airline#extensions#branch#empty_message  = ''
# 	let g:airline#extensions#whitespace#checks     = [ 'indent',  'mixed-indent-file' ]
# 	let g:airline#extensions#syntastic#enabled     = 1
# 	let g:airline#extensions#tabline#enabled       = 1
# 	let g:airline#extensions#tabline#exclude_preview = 1
#
# 	let g:airline#extensions#tabline#show_splits   = 1
# 	let g:airline#extensions#tabline#show_tabs = 1
# 	let g:airline#extensions#tabline#show_buffers = 0
# 	let g:airline#extensions#tabline#tab_nr_type   = 2 " splits and tab number
# 	let g:airline#extensions#tabline#show_close_button = 0
#
# 	" let g:airline_powerline_fonts=1
# 	if !exists('g:airline_symbols')
# 		let g:airline_symbols = {}
# 	endif
#
# 	if has("gui")
# 		let g:airline#extensions#tabline#left_sep      = '‚ÆÄ'
# 		let g:airline#extensions#tabline#left_alt_sep  = '‚ÆÅ'
# 		let g:airline#extensions#tabline#right_sep     = '‚ÆÇ'
# 		let g:airline#extensions#tabline#right_alt_sep = '‚ÆÉ'
# 		let g:airline_left_sep           = '‚ÆÄ'
# 		let g:airline_left_alt_sep       = '‚ÆÅ'
# 		let g:airline_right_sep          = '‚ÆÇ'
# 		let g:airline_right_alt_sep      = '‚ÆÉ'
# 		let g:airline_symbols.branch     = '‚≠†'
# 		let g:airline_symbols.readonly   = '‚≠§'
# 		let g:airline_symbols.linenr     = '‚≠°'
# 	endif
#
# 	let g:airline_symbols.crypt      = 'üîí'
# 	" let g:airline_symbols.linenr = '‚êä'
# 	" let g:airline_symbols.linenr = '‚ê§'
# 	" let g:airline_symbols.linenr = '¬∂'
# 	let g:airline_symbols.maxlinenr  = '‚ò∞'
# 	let g:airline_symbols.maxlinenr  = ''
# 	" let g:airline_symbols.branch = '‚éá'
# 	let g:airline_symbols.paste      = 'œÅ'
# 	let g:airline_symbols.paste      = '√û'
# 	let g:airline_symbols.paste      = '‚à•'
# 	let g:airline_symbols.spell      = 'Íû®'
# 	let g:airline_symbols.notexists  = '‚àÑ'
# 	let g:airline_symbols.whitespace = 'Œû'
# 	let g:airline#extensions#default#layout = [
# 				\ [ 'a', 'b', 'c' ],
# 				\ [ 'x', 'y', 'z' ]
# 				\ ]
# '''
# # }}}

# Lightline vim {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
if v:version >= 800 " „Éê„Éº„Ç∏„Éß„É≥Ôºò‰ª•Èôç„Å™„ÇâTimer‰Ωø„Å£„Å¶ÊôÇÂàªË°®Á§∫
	let g:currenttime = strftime("%HÊôÇ%MÂàÜ%SÁßí")

	function! SetCurrentTime()
		let tempTimer = timer_start(1000, 'CheckTemp', {'repeat' : -1})
		function! CheckTemp(tempTimer)
			let g:currenttime = strftime("%HÊôÇ%MÂàÜ%SÁßí")
			try
				call lightline#update()
			catch /.*/
				timer_stop(tempTimer)
			endtry
		endfunction
	endfunction

	call SetCurrentTime()

else
	let g:currenttime = ""
endif

function! ReturnCurrentTime()
	if &filetype == 'vimfiler'
		return ''
	else
	return g:currenttime
endfunction

" function! LightLineModified() {{{
" 	return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
" endfunction
"
" function! LightLineReadonly()
" 	return &ft !~? 'help\|vimfiler' && &readonly ? '‚≠§' : ''
" endfunction
"
" function! LightLineFilename()
" 	return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
" 				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
" 				\  &ft == 'unite' ? unite#get_status_string() :
" 				\  &ft == 'vimshell' ? vimshell#get_status_string() :
" 				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
" 				\ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
" endfunction
"
" function! LightLineFugitive()
" 	if &ft !~? 'vimfiler' && exists('*fugitive#head')
" 		let branch = fugitive#head()
" 		if has("gui_running")
" 			return branch !=# '' ? '‚≠† '.branch : ''
" 		else
" 			return branch !=# '' ? 'Branch: '.branch : ''
" 		endif
" 	endif
" 	return ''
" endfunction
"
" let g:lightline = {
" 			\ 'colorscheme': 'solarized',
" 			\ 'active': {
" 			\	  'left':  [ ['mode', 'paste'] ,
" 			\			   [ 'fugitive', 'filename'] ],
" 			\	  'right': [ ['lineinfo','currenttime', 'truncate' ] ,
" 			\			   [ 'percent' ] ,
" 			\			   [ 'fileformat', 'fileencoding', 'filetype' ] ]
" 			\ },
" 			\ 'inactive': {
" 		    \	  'left':  [ [ 'filename', 'modified' ] ],
" 		    \	  'right': [ [ 'lineinfo' ],
" 		    \              [ 'percent' ] ]
" 			\ },
" 			\ 'component_function': {
" 			\	 'currenttime': 'ReturnCurrentTime',
" 			\   'fugitive': 'LightLineFugitive',
" 			\   'filename': 'LightLineFilename'
" 			\ },
" 			\ 'component': {
" 			\	'truncate': '%<'
" 			\ },
" 			\ }
" 			if has("gui_running")
" 				let g:lightline.separator = {
" 							\	'left': '‚ÆÄ', 'right': '‚ÆÇ'
" 							\	}
" 				let g:lightline.subseparator = {
" 							\	'left': '‚ÆÅ', 'right': '‚ÆÉ'
" 							\}
" 			endif }}}

" {{{
let g:lightline = {
			\ 'colorscheme': 'onedark',
			\ 'active': {
			\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
			\   'right': [ [ 'syntastic','lineinfo','currenttime' ,'truncate'], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
			\ },
			\ 'component_function': {
			\   'fugitive': 'LightLineFugitive',
			\   'filename': 'LightLineFilename',
			\   'fileformat': 'LightLineFileformat',
			\   'filetype': 'LightLineFiletype',
			\   'fileencoding': 'LightLineFileencoding',
			\   'mode': 'LightLineMode',
			\   'ctrlpmark': 'CtrlPMark',
			\   'currenttime': 'ReturnCurrentTime',
			\ },
			\ 'component_expand': {
			\   'syntastic': 'SyntasticStatuslineFlag',
			\ },
 			\ 'component': {
 			\	'truncate': '%<'
			\ },
			\ 'component_type': {
			\   'syntastic': 'error',
			\ },
			\ 'subseparator': { 'left': '|', 'right': '|' }
			\ }
			if has("gui_running")
				let g:lightline.separator = {
							\	'left': '‚ÆÄ', 'right': '‚ÆÇ'
							\	}
				let g:lightline.subseparator = {
							\	'left': '‚ÆÅ', 'right': '‚ÆÉ'
							\}
			endif " }}}

	function! LightLineModified()
	  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction

	function! LightLineReadonly()
		if has("gui_running")
			return &ft !~? 'help\|vimfiler' && &readonly ? '‚≠§' : ''
		else
			return &ft !~? 'help\|vimfiler' && &readonly ? '[RO]' : ''
		endif
	endfunction

	function! LightLineFilename()
	  let fname = expand('%:t')
	  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
	        \ fname == '__Tagbar__' ? g:lightline.fname :
	        \ fname =~ '__Gundo\|NERD_tree' ? '' :
	        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
	        \ &ft == 'unite' ? unite#get_status_string() :
	        \ &ft == 'vimshell' ? vimshell#get_status_string() :
	        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
	        \ ('' != fname ? fname : '[No Name]') .
	        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
	endfunction

	function! LightLineFugitive()
		try
			if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
				let branch = fugitive#head()
				" return branch !=# '' ? mark.branch : ''
				if has("gui_running")
					return branch !=# '' ? '‚≠† '.branch : ''
				else
					return branch !=# '' ? 'BR:['.branch.']' : ''
				endif
			endif
		catch
		endtry
		return ''
	endfunction

	function! LightLineFileformat()
	  return winwidth(0) > 70 ? &fileformat : ''
	endfunction

	function! LightLineFiletype()
	  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
	endfunction

	function! LightLineFileencoding()
	  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
	endfunction

	function! LightLineMode()
	  let fname = expand('%:t')
	  return fname == '__Tagbar__' ? 'Tagbar' :
	        \ fname == 'ControlP' ? 'CtrlP' :
	        \ fname == '__Gundo__' ? 'Gundo' :
	        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
	        \ fname =~ 'NERD_tree' ? 'NERDTree' :
	        \ &ft == 'unite' ? 'Unite' :
	        \ &ft == 'vimfiler' ? 'VimFiler' :
	        \ &ft == 'vimshell' ? 'VimShell' :
	        \ winwidth(0) > 60 ? lightline#mode() : ''
	endfunction

	function! CtrlPMark()
	  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
	    call lightline#link('iR'[g:lightline.ctrlp_regex])
	    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
	          \ , g:lightline.ctrlp_next], 0)
	  else
	    return ''
	  endif
	endfunction

	let g:ctrlp_status_func = {
	  \ 'main': 'CtrlPStatusFunc_1',
	  \ 'prog': 'CtrlPStatusFunc_2',
	  \ }

	function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
	  let g:lightline.ctrlp_regex = a:regex
	  let g:lightline.ctrlp_prev = a:prev
	  let g:lightline.ctrlp_item = a:item
	  let g:lightline.ctrlp_next = a:next
	  return lightline#statusline(0)
	endfunction

	function! CtrlPStatusFunc_2(str)
	  return lightline#statusline(0)
	endfunction

	let g:tagbar_status_func = 'TagbarStatusFunc'

	function! TagbarStatusFunc(current, sort, fname, ...) abort
	    let g:lightline.fname = a:fname
	  return lightline#statusline(0)
	endfunction

	augroup AutoSyntastic
	  autocmd!
	  autocmd BufWritePost *.c,*.cpp call s:syntastic()
	augroup END
	function! s:syntastic()
	  SyntasticCheck
	  call lightline#update()
	endfunction

	let g:unite_force_overwrite_statusline = 0
	let g:vimfiler_force_overwrite_statusline = 0
	let g:vimshell_force_overwrite_statusline = 0
'''
# }}}

# COLORSCHEMES
[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'sickill/vim-monokai'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'vim-scripts/pyte'

[[plugins]]
repo = 'vim-scripts/summerfruit256.vim'

[[plugins]]
repo = 'ciaranm/inkpot'

[[plugins]]
repo = 'cdmedia/itg_flat_vim'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'itchyny/landscape.vim'

[[plugins]]
repo = 'rakr/vim-one'

# COLORSCHMES END

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
	" „É¥„Ç£„Ç∏„É•„Ç¢„É´„É¢„Éº„Éâ„ÅßÈÅ∏Êäû„ÅóÔºåeasy-align Âëº„Çì„ÅßÊï¥ÂΩ¢Ôºé(e.g. vip<Enter>)
	vmap <Enter> <Plug>(EasyAlign)

	" easy-align „ÇíÂëº„Çì„Å†‰∏ä„ÅßÔºåÁßªÂãï„Åó„Åü„Çä„ÉÜ„Ç≠„Çπ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÊåáÂÆö„Åó„Å¶Êï¥ÂΩ¢Ôºé(e.g. gaip)
	nmap ga <Plug>(EasyAlign)
	" Start interactive EasyAlign in visual mode (e.g. vipga)
	xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_extensions = ['tag' ]
let g:ctrlp_cmd = 'CtrlPMRUFiles'
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
	let g:EasyMotion_do_mapping = 0
	nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''

[[plugins]]
repo = "iamcco/markdown-preview.vim"
hook_add = '''
if has('win32') != 0
	let s:google_chrome_path="C:/Program\ Files/Google/Chrome/Application/chrome.exe"
	let s:google_chrome_path32="C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe"
	if executable(s:google_chrome_path)
		let g:mkdp_path_to_chrome=s:google_chrome_path
	else
		let g:mkdp_path_to_chrome=s:google_chrome_path32
	endif 
endif
'''

# [[plugins]]
# repo = "xolox/vim-session"
# depends = "vim-misc"
# hook_add = '''
# 	let g:session_autosave = 'prompt'
# 	let g:session_autoload = 'yes'
# 	let g:session_default_overwrite = 1
# 	let g:session_persist_globals = ['&sessionoptions']
# 	call add(g:session_persist_globals, 'g:session_autoload')
# 	call add(g:session_persist_globals, 'g:session_autosave')
# 	call add(g:session_persist_globals, 'g:session_default_to_last')
# 	call add(g:session_persist_globals, 'g:session_persist_globals')
# '''
#
# [[plugins]]
# repo = "xolox/vim-misc"

[[plugins]]
repo = "https://github.com/thinca/vim-quickrun"
on_cmd = 'QuickRun'
hook_add = '''
	let g:quickrun_config = get(g:, 'quickrun_config', {})
	let g:quickrun_config._ = {
				" \ 'runner'    : 'job',
				" \ 'runner/job/interval' : 100,
				\ 'runner'    : 'vimproc',
				\ 'runner/vimproc/updatetime' : 60,
				\ 'outputter' : 'error',
				\ 'outputter/error/success' : 'buffer',
				\ 'outputter/error/error'   : 'quickfix',
				\ 'outputter/buffer/split'  : ':rightbelow 8sp',
				" \ 'outputter/buffer/close_on_empty' : 1,
				\ }
	let g:quickrun_config.python = {
				\'command' : 'python',
				\'cmdopt' : '-u'
				\}
	if executable("clang++")
		let g:quickrun_config['cpp'] = {'type': 'cpp/clang++11'}
		let g:quickrun_config['cpp/clang++11'] = {
					\ 'cmdopt': '--std=c++11 --stdlib=libc++',
					\ 'type': 'cpp/clang++'
					\ }
	endif

	nmap <Leader>R <Plug>(quickrun)
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = "haya14busa/vim-migemo"
