# vim: set foldmethod=marker:
[[plugins]]
repo = 'tpope/vim-dispatch'
[[plugins]]
repo = 'Shougo/vimproc.vim' # {{{
build = 'make' # }}}
[[plugins]]
repo = 'Shougo/unite.vim' #{{{
hook_add = '''
    let g:unite_force_overwrite_statusline = 0
    let g:unite_enable_start_insert = 0
    nnoremap <silent> <Leader>ub :<C-u>Unite buffer<CR>
    nnoremap <silent> <Leader>uf :<C-u>UniteWithBufferDir -buffer-name=files -start-insert file_rec/async<CR>
    nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> <Leader>um :<C-u>Unite file_mru<CR>
    nnoremap <silent> <Leader>uu :<C-u>Unite buffer file_mru<CR>
    " Unite All
    nnoremap <silent> <Leader>ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
    " UniteOutLine
    nnoremap <silent> <Leader>uo :<C-u>Unite -vertical -no-quit -winwidth=40 outline -direction=botright<CR>
    " ウィンドウを分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    " ウィンドウを縦に分割して開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    " タブで開く
    au FileType unite nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    au FileType unite inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
    " ESCキーを2回押すと終了する
    au FileType unite nmap <silent> <buffer> <ESC><ESC> <Plug>(unite_exit)
    au FileType unite imap <silent> <buffer> <ESC><ESC> <Plug>(unite_exit)
    au FileType unite imap <silent> <buffer> <C-j> <Plug>(unite_select_next_line)
    au FileType unite imap <silent> <buffer> <C-k> <Plug>(unite_select_previous_line)

    "nice unite and ag
    " let g:unite_source_history_yank_enable = 1
    " try
    let g:unite_source_rec_async_command =
                \ ['ag', '--follow', '--nocolor', '--nogroup',
                \  '--hidden', '-g', '']
    let g:unite_source_rec_max_cache_files = 5000
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    " catch
    " endtry
    " search a file in the filetree
    " nnoremap <space><space> :<C-u>Unite -start-insert file_rec/async<cr>
    " reset not it is <C-l> normally
    " nnoremap <space>r <Plug>(unite_restart)
'''# }}}
[[plugins]]
repo = 'Shougo/vimfiler.vim' # {{{
# on_cmd = ['VimFilerBufferDir', 'VimFilerCurrentDir']
depends = 'unite.vim'
hook_add = '''
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimfiler_enable_auto_cd = 1
    let g:vimfiler_as_default_explorer = 0
    " nnoremap <silent> <Leader>e :VimFilerBufferDir -toggle -find -force-quit -split  -status -winwidth=35 -simple -split-action=below<CR>
    nnoremap <silent> <Leader>v :VimFilerBufferDir -toggle -find -force-quit -status -split-action=below<CR>
    " nnoremap <silent> <Leader>E :VimFilerCurrentDir -split -toggle -force-quit -status -winwidth=35 -simple -split-action=below<CR>
    nnoremap <silent> <Leader>V :VimFilerCurrentDir -toggle -force-quit -status -split-action=below<CR>
'''
# }}}
[[plugins]]
repo = 'Shougo/unite-outline' # {{{
depends = ['unite.vim'] # }}}
[[plugins]]
repo = 'Shougo/neomru.vim' # {{{
depends = ['unite.vim'] # }}}
[[plugins]]
repo = 'ujihisa/unite-colorscheme' # {{{
depends = ['unite.vim'] # }}}
[[plugins]]
repo = 'Shougo/neossh.vim' # {{{
depends = ['unite.vim'] # }}}
[[plugins]]
repo = 'Shougo/vimshell.vim' # {{{
depends = ['vimproc.vim']
hook_add = '''
let g:vimshell_prompt = "% "
let g:vimshell_secondary_prompt = "> "
let g:vimshell_user_prompt = 'getcwd()'
''' # }}}
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{
hook_add = '''
    " let g:ctrlp_cmd = "CtrlPMRUFiles"
    " yankroundのところでマッピングし直している
    let g:ctrlp_map = ''
    " let g:ctrlp_extensions = ['mixed']
    let g:ctrlp_max_files = 5000
    let g:ctrlp_match_window = "max:30"
    nnoremap <Leader>mr :<c-u>CtrlPMRUFiles<cr>
    nnoremap <Leader>c :<C-u>CtrlPCurWD<cr>
    " nnoremap <Leader>r :<C-u>CtrlPClearCache<cr>
    nnoremap <Leader>b :<C-u>CtrlPBuffer<cr>
    nnoremap <Leader><Leader> :<C-u>CtrlP<cr>
    if executable('ag')
        if !has("win32")
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag %s -i --follow --nocolor --nogroup -g ""'
        else
            let g:ctrlp_use_caching=1
            let g:ctrlp_user_command='ag -i --follow --nocolor --nogroup -g "" %s'
        endif
    endif
''' # }}}
[[plugins]]
repo = 'mattn/ctrlp-filer' # {{{
depends = 'ctrlp.vim'
hook_add = '''
    nnoremap <Leader>f :<C-u>CtrlPFiler<cr>
''' # }}}
[[plugins]]
repo = 'easymotion/vim-easymotion' # {{{
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    nmap <Leader>s <Plug>(easymotion-overwin-f2)
''' # }}}
[[plugins]]
repo = 'kana/vim-submode' # {{{
hook_add = '''
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
''' # }}}
[[plugins]]
repo = 'superbrothers/vim-vimperator'
[[plugins]]
repo = "nathanaelkane/vim-indent-guides" # {{{
hook_add = '''
    let g:indent_guides_guide_size = 0
    let g:indent_guides_color_change_percent = 5
    let g:indent_guides_start_level = 1
    let g:indent_guides_enable_on_vim_startup = 1
''' # }}}
[[plugins]]
repo = 'LeafCage/foldCC.vim' # {{{
hook_add = '''
    let g:foldCCtext_enable_autofdc_adjuster = 1
    let g:foldCCtext_head = ''
    " let g:foldCCtext_tail = '"(ﾟｪﾟ  )". (v:foldend-v:foldstart+1)'

    let g:foldCCtext_tail = 'printf(" %4d lines Lv%-2d", v:foldend-v:foldstart+1, v:foldlevel)'

    set foldtext=FoldCCtext()
    set fillchars=vert:\|
    " augroup FoldCC "{{{
    "     hi Folded gui=bold guibg=Grey28 guifg=gray80
    "     hi FoldColumn guibg=Grey14 guifg=gray80
    "
    "     " hi Folded gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey50 guifg=Grey80
    "     " hi FoldColumn gui=bold term=standout ctermbg=Grey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
    " augroup END "}}}
''' # }}}
[[plugins]]
repo = 'Konfekt/FastFold'
[[plugins]]
repo = 'vim-airline/vim-airline' # {{{
hook_add = '''
    let g:airline#extensions#branch#enabled        = 1
    let g:airline#extensions#branch#empty_message  = ''
    " let g:airline#extensions#whitespace#checks     = [ 'indent',  'mixed-indent-file' ]
    let g:airline#extensions#syntastic#enabled     = 0

    let g:airline#extensions#tabline#enabled       = 1 "{{{
    " right side show mode
    let g:airline#extensions#tabline#show_tab_type = 1
    " プレビューウィンドウのステータスライン(Airline優先:0か,他のプラグイン優先:1)
    let g:airline#extensions#tabline#exclude_preview = 0
    let g:airline#extensions#tabline#show_tabs = 1
    let g:airline#extensions#tabline#show_splits   = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type   = 2 " splits and tab number
    let g:airline#extensions#tabline#show_close_button = 0 "}}}

    " let g:airline_powerline_fonts=1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    " powerline symbols" {{{
    if has("gui_running")
        let g:airline#extensions#tabline#left_sep      = '⮀'
        let g:airline#extensions#tabline#left_alt_sep  = '⮁'
        let g:airline#extensions#tabline#right_sep     = '⮂'
        let g:airline#extensions#tabline#right_alt_sep = '⮃'
        let g:airline_left_sep           = '⮀'
        let g:airline_left_alt_sep       = '⮁'
        let g:airline_right_sep          = '⮂'
        let g:airline_right_alt_sep      = '⮃'
        let g:airline_symbols.branch     = '⭠'
        let g:airline_symbols.readonly   = '⭤'
        let g:airline_symbols.linenr     = '⭡'
    else
        let g:airline_left_sep           = ''
        let g:airline_left_alt_sep       = ''
        let g:airline_right_sep          = ''
        let g:airline_right_alt_sep      = ''
    endif " }}}

    " unicode symobols# {{{
    " let g:airline_symbols.crypt = '🔒'
    " let g:airline_symbols.linenr = '␊'
    " let g:airline_symbols.linenr = '␤'
    " let g:airline_symbols.linenr = '¶'
    " let g:airline_symbols.maxlinenr = '☰'
    " let g:airline_symbols.maxlinenr = ''
    " let g:airline_symbols.branch = '⎇'
    " let g:airline_symbols.paste = 'ρ'
    " let g:airline_symbols.paste = 'Þ'
    " let g:airline_symbols.paste = '∥'
    " let g:airline_symbols.spell = 'Ꞩ'
    " let g:airline_symbols.notexists = '∄'
    " let g:airline_symbols.whitespace = 'Ξ'# }}}

    " disable warning " {{{
    " let g:airline#extensions#default#layout = [
    "             \ [ 'a', 'b', 'c' ],
    "             \ [ 'x', 'y', 'z' ]
    "             \ ] " }}}
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
# }}}
[[plugins]]
repo = "haya14busa/vim-migemo"
[[plugins]]
repo = "vim-jp/vimdoc-ja"
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'tyru/open-browser.vim.git' # {{{
hook_add = '''
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
''' # }}}
[[plugins]]
repo = "tmux-plugins/vim-tmux"
[[plugins]]
repo = "osyo-manga/vim-anzu" # {{{
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

" clear status
" nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):noh<CR>


" statusline
set statusline=%{anzu#search_status()}


" if start anzu-mode key mapping
" anzu-mode is anzu(12/51) in screen
" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)
''' # }}}
[[plugins]]
repo = 'SirVer/ultisnips' # {{{
hook_add = '''
    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<c-j>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    " let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
    if has("unix")
        if !g:myvimrc_python_version == ""
            let g:UltiSnipsUsePythonVersion = g:myvimrc_python_version
        else
            let g:UltiSnipsUsePythonVersion = 2
        endif
    endif
''' # }}}
[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
    let g:SuperTabDefaultCompletionType = '<c-n>'
'''
[[plugins]]
repo = 'MarcWeber/vim-addon-mw-utils'
[[plugins]]
repo = 'tomtom/tlib_vim'
[[plugins]]
repo = 'honza/vim-snippets'
[[plugins]]
repo = "osyo-manga/shabadou.vim"
[[plugins]]
repo =  'othree/html5.vim' # {{{
on_ft = ['html']
hook_add = '''
    let g:html5_event_handler_attributes_complete = 1
    let g:html5_rdfa_attributes_complete = 1
    let g:html5_microdata_attributes_complete = 1
    let g:html5_aria_attributes_complete = 1
''' # }}}
[[plugins]]
repo = 'yomi322/neco-tweetvim.git'
[[plugins]]
repo =  'vim-scripts/JavaScript-Indent' # {{{
on_ft = 'javascript' # }}}
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'osyo-manga/vim-precious' # {{{
# on_event = "VimEnter"
# on_cmd = ["PreciousReset", "PreciousSwitch"]
depends = ['context_filetype.vim']
hook_add = '''
    " let g:context_filetype#search_offset = 300
    let g:precious_enable_switch_CursorMoved = { '*' : 0 }
    let g:precious_enable_switch_CursorHold = { '*' : 1 }
    " INSERTモードのON／OFFに合わせてトグル
    augroup PreciousAuto
        autocmd!
        autocmd InsertEnter * :PreciousSwitch
        autocmd InsertLeave * :PreciousSwitch
    augroup END
    " setfiletype を無効
    " let g:precious_enable_switchers = {
    " \    "*" : {
    " \        "setfiletype" : 0,
    " \    },
    " \}
    " augroup test
    "     autocmd!
    "     autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
    " augroup END
''' # }}}
[[plugins]]
repo = 'gregsexton/MatchTag' # {{{
on_ft = ['html','xml'] # }}}
[[plugins]]
repo = 'basyura/twibill.vim.git' # {{{
depends = ['open-browser.vim'] # }}}
[[plugins]]
repo = 'basyura/bitly.vim.git'
[[plugins]]
repo = 'LeafCage/yankround.vim' # {{{
hook_add = '''
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)

nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)

nnoremap <silent><SID>(ctrlp) :<C-u>CtrlP<CR>
nmap <expr><C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "<SID>(ctrlp)"
nmap <C-n> <Plug>(yankround-next)
''' # }}}
[[plugins]]
repo = "bkad/CamelCaseMotion" # {{{
hook_add = '''
    call camelcasemotion#CreateMotionMappings(',')
''' # }}}
[[plugins]]
repo = 'tyru/caw.vim.git' # {{{
# on_event = "CursorMoved" # }}}
[[plugins]]
repo = 'tpope/vim-surround' # {{{
# on_event = "CursorMoved" # }}}
[[plugins]]
repo = 'junegunn/vim-easy-align' # {{{
# on_event = "CursorMoved"
hook_add = '''
    " ヴィジュアルモードで選択し，easy-align 呼んで整形．(e.g. vip<Enter>)
    vmap <Enter> <Plug>(LiveEasyAlign)

    " easy-align を呼んだ上で，移動したりテキストオブジェクトを指定して整形．(e.g. gaip)
    " nmap ga <Plug>(EasyAlign)
    " " Start interactive EasyAlign in visual mode (e.g. vipga)
    " xmap ga <Plug>(EasyAlign)
''' # }}}
[[plugins]]
repo = "osyo-manga/vim-brightest" # {{{
# on_event = ['VimEnter']
# on_cmd = ['BrightestEnable']
hook_add = '''
let g:brightest#highlight = {
\   "group" : "BrightestUnderline"
\}
'''
# }}}
[[plugins]]
repo = 'istepura/vim-toolbar-icons-silk'
[[plugins]]
repo = "justinmk/vim-dirvish"# {{{
# on_event = 'VimEnter'
# on_cmd = "Dirvish"
hook_add = '''
nnoremap <silent> <Leader>e :let w:dirvishbefore=expand("%:p")<cr>:Dirvish %:p:h<cr>
nnoremap <silent> <Leader>E :Dirvish<cr>
augroup mydirvish
    autocmd!
    " hとlによる移動
    autocmd FileType dirvish nnoremap <silent><buffer> l :call dirvish#open('edit', 0)<CR>
    autocmd FileType dirvish xnoremap <silent><buffer> l :call dirvish#open('edit', 0)<CR>
    autocmd FileType dirvish nmap <silent><buffer> h <Plug>(dirvish_up)
    autocmd FileType dirvish xmap <silent><buffer> h <Plug>(dirvish_up)
    " 起動時にソート
    autocmd FileType dirvish silent sort r /[^\/]$/
    " autocmd FileType dirvish silent keeppatterns g@\v[\/]\.[^\/]+[\/]?$@d
    " .とsに隠しファイルとソートを割り当て
    autocmd FileType dirvish nnoremap <silent><buffer> . :keeppatterns g@\v[\/]\.[^\/]+[\/]?$@d<cr>
    autocmd FileType dirvish nnoremap <silent><buffer> s :sort r /[^\/]$/<cr>

    " 開いていたファイルやDirectory(w:dirvishbefore)にカーソルをあわせる
    autocmd FileType dirvish if exists("w:dirvishbefore") | call search('\V\^'.escape(w:dirvishbefore, '\').'\$', 'cw') | endif
    autocmd FileType dirvish let w:dirvishbefore=expand("%:p")
augroup END
'''
# }}}

# COLORSCHEMES {{{
[[plugins]]
repo = 'joshdick/onedark.vim'
[[plugins]]
repo = 'sickill/vim-monokai'
[[plugins]]
repo = 'altercation/vim-colors-solarized'
[[plugins]]
repo = 'w0ng/vim-hybrid'
[[plugins]]
repo = 'vim-scripts/pyte'
[[plugins]]
repo = 'vim-scripts/summerfruit256.vim'
[[plugins]]
repo = 'ciaranm/inkpot'
[[plugins]]
repo = 'cdmedia/itg_flat_vim'
[[plugins]]
repo = 'tomasr/molokai'
[[plugins]]
repo = 'rakr/vim-one'
# COLORSCHEMESE END }}}
